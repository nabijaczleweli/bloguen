var N=null,E="",T="t",U="u",searchIndex={};
var R=["UnicodeXID","string","result","renamerule","RenameRule","fnvhasher","FnvHasher","try_from","try_into","borrow","borrow_mut","type_id","formatter","StrSimError","lazy_static","triesetowned","Create a new trie set from a set of Unicode scalar values.","contains_char","Returns true if and only if the given Unicode scalar value…","contains_u32","Returns true if and only if the given codepoint is in this…","to_owned","clone_into","typeid","triesetslice","TrieSetOwned","TrieSetSlice","scopeguard","into_inner","should_run","deref_mut","Strategy","ScopeGuard","demangle","trydemangleerror","Demangle","TryDemangleError","split128","ppv_lite86","Generate only the basic implementations necessary to be…","ppv_lite86::x86_64","instance","vec128_storage","vec256_storage","vec512_storage","default","RotateEachWord32","RotateEachWord64","UnsafeFrom","LaneWords4","MultiLane","StoreBytes","SseMachine","Avx2Machine","Returns the character's displayed width in columns, or…","width_cjk","Returns the string's displayed width in columns.","UnicodeWidthChar","UnicodeWidthStr","UNICODE_VERSION","smallvec","Constructs a new `SmallVec` on the stack from an `A`…","extend_from_slice","into_iter","next_back","ordering","intoiterator","option","size_hint","index_mut","rangefrom","rangefull","ExtendFromSlice","SmallVec","IntoIter","as_slice","The span of this class.","negated","regex_syntax::ast","original","regex_syntax::ast::ErrorKind","Assertion","A single zero-width assertion.","Repetition","A grouped regular expression.","Alternation","An alternation of regular expressions.","A concatenation of regular expressions.","Literal","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","A perl character class, e.g., `\\d` or `\\W`.","Bracketed","A bracketed character class set, which may contain zero or…","CaptureName","Unicode","ParserBuilder","A builder for a regular expression parser.","parserbuilder","withcomments","classsetitem","classsetbinaryop","position","classasciikind","regex_syntax","ClassUnicode","ErrorKind","WordBoundary","A set of characters represented by Unicode scalar values.","StartLine","StartText","GroupKind","CaptureIndex","NonCapturing","regex_syntax::hir","RepetitionKind","The kind of a repetition operator.","ZeroOrOne","ZeroOrMore","OneOrMore","RepetitionRange","Executes an implementation of `Visitor` in constant stack…","literals","is_empty","Create a new printer.","Print the given `Ast` to the given writer. The writer must…","translatorbuilder","translator","translate","All implementors of `Visitor` must provide a `finish`…","visit_pre","visit_post","visit_alternation_in","Return the type of this error.","errorkind","The original pattern string in which this error occurred.","Return the span at which this error occurred.","literal","repetition","Return true if and only if this HIR is required to match…","Return true if and only if this HIR contains any…","is_always_utf8","classunicode","case_fold_simple","classunicoderange","Create a new class from a sequence of ranges.","classbytes","Create a new class with no ranges.","Add a new range to this set.","Return an iterator over all ranges in this class.","Return the underlying ranges as a slice.","Expand this character class such that it contains all case…","intersect","difference","symmetric_difference","classbytesrange","Return the start of this range.","Return the end of this range.","is_negated","is_match_empty","Create a new parser builder with a default configuration.","Build a parser from this configuration with the given…","nest_limit","Set the nesting limit for this parser.","Whether to support octal syntax or not.","allow_invalid_utf8","ignore_whitespace","Enable verbose mode in the regular expression.","case_insensitive","multi_line","dot_matches_new_line","swap_greed","Enable or disable the Unicode flag (`u`) by default.","Create a new parser with a default configuration.","to_string","regex_syntax::ast::parse","regex_syntax::ast::print","regex_syntax::hir::literal","regex_syntax::hir::print","regex_syntax::hir::translate","regex_syntax::utf8","alternation","classsetunion","flagsitem","wordboundary","groupkind","repetitionkind","repetitionrange","partial_cmp","literalkind","specialliteralkind","hexliteralkind","classperl","classperlkind","classascii","classunicodekind","classunicodeopkind","classbracketed","classset","classsetrange","classsetbinaryopkind","assertion","assertionkind","repetitionop","capturename","setflags","flagsitemkind","utf8sequence","utf8range","description","This method is called before beginning traversal of the AST.","This method is called on an `Ast` before descending into…","This method is called on an `Ast` after descending all of…","This method is called between child nodes of an…","visit_class_set_item_pre","This method is called on every `ClassSetItem` before…","visit_class_set_item_post","This method is called on every `ClassSetItem` after…","visit_class_set_binary_op_pre","This method is called on every `ClassSetBinaryOp` before…","visit_class_set_binary_op_post","This method is called on every `ClassSetBinaryOp` after…","visit_class_set_binary_op_in","This method is called between the left hand and right hand…","This method is called before beginning traversal of the HIR.","This method is called on an `Hir` before descending into…","This method is called on an `Hir` after descending all of…","This method is called between child nodes of an alternation.","WithComments","ClassPerl","ClassAscii","ClassBracketed","ClassSetRange","ClassSetUnion","ClassSetBinaryOp","RepetitionOp","FlagsItem","LiteralKind","SpecialLiteralKind","HexLiteralKind","ClassPerlKind","ClassAsciiKind","ClassUnicodeKind","ClassUnicodeOpKind","ClassSetItem","ClassSetBinaryOpKind","AssertionKind","FlagsItemKind","TranslatorBuilder","Translator","ClassUnicodeRange","ClassBytes","ClassBytesRange","Utf8Range","Utf8Sequence","Utf8Sequences","ClassUnicodeIter","ClassBytesIter","unchecked_index","Access the element(s) at `index`, without bounds checks!","get_unchecked","get_unchecked_mut","CheckIndex","GetUnchecked","GetUncheckedMut","UncheckedIndex","An iterator over the values of a map.","with_capacity","shrink_to_fit","Returns an iterator visiting all values in ascending order…","Returns an iterator visiting all key-value pairs in…","Retains only the elements specified by the predicate.","from_iter","VacantEntry","OccupiedEntry","ValuesMut","A colour is one specific type of ANSI escape code, and can…","Colour #0 (foreground code `30`, background code `40`).","Colour #1 (foreground code `31`, background code `41`).","Colour #2 (foreground code `32`, background code `42`).","Colour #3 (foreground code `33`, background code `43`).","Colour #4 (foreground code `34`, background code `44`).","Colour #5 (foreground code `35`, background code `45`).","Colour #6 (foreground code `36`, background code `46`).","Colour #7 (foreground code `37`, background code `47`).","A colour number from 0 to 255, for use in 256-colour…","A 24-bit RGB color, as specified by ISO-8613-3.","Returns a `Style` with the hidden property set.","Returns a `Style` with the bold property set.","Returns a `Style` with the dimmed property set.","Returns a `Style` with the italic property set.","underline","Returns a `Style` with the underline property set.","Returns a `Style` with the blink property set.","Returns a `Style` with the reverse property set.","strikethrough","Returns a `Style` with the background colour property set.","Paints the given text with this colour, returning an ANSI…","ansigenericstring","ANSIStrings","ANSIByteStrings","ANSIGenericStrings","ANSIGenericString","ANSIString","ANSIByteString","Returns `true` if this value is a member of the \"Other,…","Returns true if this value is a member of the \"Letter,…","Returns true if this value is a member of the \"Mark,…","Returns true if this value is a member of the \"Number,…","Returns true if this value is a member of the…","Returns true if this value is a member of the \"Symbol,…","Returns true if this value is a member of the \"Separator,…","UnicodeCategories","Apply the function `f` on the value in the `Left` variant…","Apply the function `f` on the value in the `Right` variant…","Returns left value or computes it from a closure","Factor out a homogeneous type from an either of pairs.","percentencode","percentdecode","utf8error","PercentDecode","PercentEncode","Codepoints","Transmute a byte slice into a sequence of values of the…","Transmute a byte slice into a single instance of a…","triviallytransmutable","Convert a byte slice into a single instance of a…","transmute_many","transmute_many_mut","transmute_many_permissive","View a byte slice as a slice of an arbitrary type.","transmute_vec","safe_transmute","View a byte slice as a slice of boolean values.","unalignederror","copy_unchecked","Create a copy of the source data, transmuted into a…","Create a copy of the data, transmuted into a new vector.…","guarderror","Transmute the slice to a slice of another type, ensuring…","View a byte slice as a slice of a trivially transmutable…","Transform a vector into a vector of another element type.","Transmute a single instance of a trivially transmutable…","Transmute a slice of arbitrary types into a slice of their…","safe_transmute::error","safe_transmute::guard","errorreason","incompatiblevectargeterror","GuardError","UnalignedError","IncompatibleVecTargetError","ErrorReason","SingleValueGuard","PedanticGuard","AllOrNothingGuard","SingleManyGuard","PermissiveGuard","Wrapper type for getting second keys/values with first…","Removes the pair corresponding to the first K/V from the…","bidir_map","byfirst","bysecond","bidirmap","FirstColumn","SecondColumn","Returns the number of elements in the map.","Returns true if the map contains no elements."];
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting,…","i":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix",E,"Like `ANSIString`, but only displays the difference…",N,N],[3,"Suffix",E,"Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style",E,"A style is a collection of properties that can format a…",N,N],[12,"foreground",E,"The style's foreground colour, if it has one.",0,N],[12,"background",E,"The style's background colour, if it has one.",0,N],[12,"is_bold",E,"Whether this style is bold.",0,N],[12,"is_dimmed",E,"Whether this style is dimmed.",0,N],[12,"is_italic",E,"Whether this style is italic.",0,N],[12,"is_underline",E,"Whether this style is underlined.",0,N],[12,"is_blink",E,"Whether this style is blinking.",0,N],[12,"is_reverse",E,"Whether this style has reverse colours.",0,N],[12,"is_hidden",E,"Whether this style is hidden.",0,N],[12,"is_strikethrough",E,"Whether this style is struckthrough.",0,N],[3,R[301],E,"An `ANSIGenericString` includes a generic string type and…",N,N],[3,R[300],E,"A set of `ANSIGenericString`s collected together, in order…",N,N],[12,"0",E,E,1,N],[4,"Colour",E,R[275],N,N],[13,"Black",E,R[276],2,N],[13,"Red",E,R[277],2,N],[13,"Green",E,R[278],2,N],[13,"Yellow",E,R[279],2,N],[13,"Blue",E,R[280],2,N],[13,"Purple",E,R[281],2,N],[13,"Cyan",E,R[282],2,N],[13,"White",E,R[283],2,N],[13,"Fixed",E,R[284],2,N],[13,"RGB",E,R[285],2,N],[4,"Color",E,R[275],N,N],[13,"Black",E,R[276],2,N],[13,"Red",E,R[277],2,N],[13,"Green",E,R[278],2,N],[13,"Yellow",E,R[279],2,N],[13,"Blue",E,R[280],2,N],[13,"Purple",E,R[281],2,N],[13,"Cyan",E,R[282],2,N],[13,"White",E,R[283],2,N],[13,"Fixed",E,R[284],2,N],[13,"RGB",E,R[285],2,N],[5,R[298],E,"A function to construct an `ANSIStrings` instance.",N,[[],["ansistrings"]]],[5,R[299],E,"A function to construct an `ANSIByteStrings` instance.",N,[[],["ansibytestrings"]]],[11,"prefix",E,"The prefix for this style.",0,[[],["prefix"]]],[11,"infix",E,"The infix between this style and another.",0,[[["style"]],["infix"]]],[11,"suffix",E,"The suffix for this style.",0,[[],["suffix"]]],[11,"prefix",E,"The prefix for this colour.",2,[[],["prefix"]]],[11,"infix",E,"The infix between this colour and another.",2,[[["colour"]],["infix"]]],[11,"suffix",E,"The suffix for this colour.",2,[[],["suffix"]]],[11,"new",E,"Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold",E,R[287],0,[[["self"]],["style"]]],[11,"dimmed",E,R[288],0,[[["self"]],["style"]]],[11,"italic",E,R[289],0,[[["self"]],["style"]]],[11,R[290],E,R[291],0,[[["self"]],["style"]]],[11,"blink",E,R[292],0,[[["self"]],["style"]]],[11,"reverse",E,R[293],0,[[["self"]],["style"]]],[11,"hidden",E,R[286],0,[[["self"]],["style"]]],[11,R[294],E,R[286],0,[[["self"]],["style"]]],[11,"fg",E,"Returns a `Style` with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on",E,R[295],0,[[["self"],["colour"]],["style"]]],[11,"is_plain",E,"Return true if this `Style` has no actual styles, and can…",0,[[],["bool"]]],[11,"normal",E,"Return a `Style` with the foreground colour set to this…",2,[[],["style"]]],[11,"bold",E,R[287],2,[[],["style"]]],[11,"dimmed",E,R[288],2,[[],["style"]]],[11,"italic",E,R[289],2,[[],["style"]]],[11,R[290],E,R[291],2,[[],["style"]]],[11,"blink",E,R[292],2,[[],["style"]]],[11,"reverse",E,R[293],2,[[],["style"]]],[11,"hidden",E,R[286],2,[[],["style"]]],[11,R[294],E,"Returns a `Style` with the strikethrough property set.",2,[[],["style"]]],[11,"on",E,R[295],2,[[["colour"]],["style"]]],[11,"paint",E,R[296],0,[[["i"]],[[R[297]],["toowned"],["sized"]]]],[11,"paint",E,R[296],2,[[["i"]],[[R[297]],["toowned"],["sized"]]]],[6,R[302],E,"An ANSI String is a string coupled with the `Style` to…",N,N],[6,R[303],E,"An `ANSIByteString` represents a formatted series of…",N,N],[6,R[298],E,"A set of `ANSIString`s collected together, in order to be…",N,N],[6,R[299],E,"A set of `ANSIByteString`s collected together, in order to…",N,N],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[173],E,E,3,[[["self"]],[R[1]]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[173],E,E,4,[[["self"]],[R[1]]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,R[21],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[173],E,E,5,[[["self"]],[R[1]]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[23]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[21],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[173],E,E,6,[[["self"]],[R[1]]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[],[R[2]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[23]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[173],E,E,1,[[["self"]],[R[1]]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[45],E,"Returns a style with no properties set. Formatting text…",0,[[],["style"]]],[11,"clone",E,E,3,[[["self"]],["prefix"]]],[11,"clone",E,E,4,[[["self"]],["infix"]]],[11,"clone",E,E,5,[[["self"]],["suffix"]]],[11,"clone",E,E,0,[[["self"]],["style"]]],[11,"clone",E,E,2,[[["self"]],["colour"]]],[11,"clone",E,E,6,[[["self"]],[R[297]]]],[11,"eq",E,E,0,[[["self"],["style"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["style"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["colour"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["colour"]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[297]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[297]]],["bool"]]],[11,"from",E,"You can turn a `Colour` into a `Style` with the foreground…",0,[[["colour"]],["style"]]],[11,"from",E,E,6,[[["i"]],[R[297]]]],[11,"deref",E,E,6,[[["self"]],["s"]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"write_to",E,"Write an `ANSIByteString` to an `io::Write`. This writes…",9,[[["self"],["w"]],[R[2]]]],[11,"write_to",E,"Write `ANSIByteStrings` to an `io::Write`. This writes the…",10,[[["self"],["w"]],[R[2]]]]],"p":[[3,"Style"],[3,R[300]],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,R[301]],[6,R[302]],[6,R[298]],[6,R[303]],[6,R[299]]]};
searchIndex["bidir_map"]={"doc":"Bidirectional maps for Rust.","i":[[3,"BidirMap",R[358],"A bidirectional map.",N,N],[3,"ByFirst",E,R[356],N,N],[12,"0",E,E,0,N],[3,"BySecond",E,R[356],N,N],[12,"0",E,E,1,N],[3,"Iter",E,"An iterator over the K/V pairs contained in a `BidirMap`.",N,N],[3,"IterMut",E,"An iterator over mutable K/V pairs contained in a…",N,N],[3,R[362],E,"An iterator the first set of K/Vs in a `BidirMap`.",N,N],[3,R[363],E,"An iterator the second set of K/Vs in a `BidirMap`.",N,N],[11,"new",E,"Create a new empty instance of `BidirMap`",2,[[],["self"]]],[11,R[266],E,"Create a new empty instance of `BidirMap` with the…",2,[[["usize"]],["self"]]],[11,"clear",E,"Clears the map, removing all entries.",2,[[["self"]]]],[11,"insert",E,"Inserts a K/V-K/V pair into the map.",2,[[["self"],["kv2"],["kv1"]],[R[67]]]],[11,"iter",E,"Gets an iterator over the entries of the map.",2,[[["self"]],["iter"]]],[11,"iter_mut",E,"Gets a mutable iterator over the entries of the map.",2,[[["self"]],["itermut"]]],[11,"first_col",E,"Gets an iterator over the first K/V of the map.",2,[[["self"]],["firstcolumn"]]],[11,"second_col",E,"Gets an iterator over the second K/V of the map.",2,[[["self"]],["secondcolumn"]]],[11,"len",E,R[364],2,[[["self"]],["usize"]]],[11,R[122],E,R[365],2,[[["self"]],["bool"]]],[11,"get_by_first",E,"Returns a reference to the second K/V corresponding to the…",2,[[["self"],["q"]],[["kv2"],[R[67]]]]],[11,"get_by_second",E,"Returns a reference to the first K/V corresponding to the…",2,[[["self"],["q"]],[[R[67]],["kv1"]]]],[11,"contains_first_key",E,"Check if the map contains the first K/V",2,[[["self"],["q"]],["bool"]]],[11,"contains_second_key",E,"Check if the map contains the second K/V",2,[[["self"],["q"]],["bool"]]],[11,"get_mut_by_first",E,"Returns a mutable reference to the second K/V…",2,[[["self"],["q"]],[[R[67]],["kv2"]]]],[11,"get_mut_by_second",E,"Returns a mutable reference to the first K/V corresponding…",2,[[["self"],["q"]],[[R[67]],["kv1"]]]],[11,"remove_by_first",E,R[357],2,[[["self"],["q"]],[R[67]]]],[11,"remove_by_second",E,R[357],2,[[["self"],["q"]],[R[67]]]],[14,R[358],E,"Create a `BidirMap` from a set of K/V-K/V pairs.",N,N],[11,R[63],E,E,2,[[],["i"]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[63],E,E,3,[[],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[63],E,E,4,[[],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,R[63],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[23]]]],[11,R[63],E,E,6,[[],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[],[R[2]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[23]]]],[11,R[63],E,E,2,[[]]],[11,R[45],E,E,2,[[],[R[361]]]],[11,"clone",E,E,2,[[["self"]],[R[361]]]],[11,"clone",E,E,0,[[["self"]],[R[359]]]],[11,"clone",E,E,1,[[["self"]],[R[360]]]],[11,R[187],E,E,0,[[["self"],[R[359]]],[[R[67],[R[65]]],[R[65]]]]],[11,"lt",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,R[187],E,E,1,[[["self"],[R[360]]],[[R[67],[R[65]]],[R[65]]]]],[11,"lt",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"extend",E,E,2,[[["self"],[R[66]]]]],[11,"eq",E,E,2,[[["self"],[R[361]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[361]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[359]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"next",E,E,3,[[["self"]],[R[67]]]],[11,"next",E,E,4,[[["self"]],[R[67]]]],[11,"next",E,E,5,[[["self"]],[R[67]]]],[11,"next",E,E,6,[[["self"]],[R[67]]]],[11,"cmp",E,E,0,[[["self"],[R[359]]],[R[65]]]],[11,"cmp",E,E,1,[[["self"],[R[360]]],[R[65]]]],[11,"hash",E,E,2,[[["self"],["__hkv1kv2"]]]],[11,"hash",E,E,0,[[["self"],["__hq"]]]],[11,"hash",E,E,1,[[["self"],["__hq"]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"index",E,E,2,[[["self"],[R[359]]]]],[11,"index",E,E,2,[[["self"],[R[359]]]]],[11,"index",E,E,2,[[["self"],[R[360]]]]],[11,"index",E,E,2,[[["self"],[R[360]]]]],[11,R[271],E,E,2,[[[R[66]]],["self"]]]],"p":[[3,"ByFirst"],[3,"BySecond"],[3,"BidirMap"],[3,"Iter"],[3,"IterMut"],[3,R[362]],[3,R[363]]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate…",N,N]],"p":[]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","i":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a…",N,N],[13,"Left",E,"A value of type `L`.",0,N],[13,"Right",E,"A value of type `R`.",0,N],[11,"is_left",E,"Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right",E,"Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left",E,"Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[],[R[67]]]],[11,"right",E,"Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[],[R[67]]]],[11,"as_ref",E,"Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],[["either"],["r"],["l"]]]],[11,"as_mut",E,"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],[["either"],["l"],["r"]]]],[11,"flip",E,"Convert `Either<L, R>` to `Either<R, L>`.",0,[[],["either"]]],[11,"map_left",E,R[312],0,[[["f"]],["either"]]],[11,"map_right",E,R[313],0,[[["f"]],["either"]]],[11,"either",E,"Apply one of two functions depending on contents, unifying…",0,[[["f"],["g"]],[T]]],[11,"either_with",E,"Like `either`, but provide some context to whichever of…",0,[[["ctx"],["f"],["g"]],[T]]],[11,"left_and_then",E,R[312],0,[[["f"]],["either"]]],[11,"right_and_then",E,R[313],0,[[["f"]],["either"]]],[11,R[63],E,"Convert the inner value to an iterator.",0,[[],["either"]]],[11,"left_or",E,"Return left value or given value",0,[[["l"]],["l"]]],[11,"left_or_default",E,"Return left or a default",0,[[],["l"]]],[11,"left_or_else",E,R[314],0,[[["f"]],["l"]]],[11,"right_or",E,"Return right value or given value",0,[[["r"]],["r"]]],[11,"right_or_default",E,"Return right or a default",0,[[],["r"]]],[11,"right_or_else",E,R[314],0,[[["f"]],["r"]]],[11,"factor_first",E,R[315],0,[[]]],[11,"factor_second",E,R[315],0,[[]]],[11,R[28],E,"Extract the value of an either over two equivalent types.",0,[[],[T]]],[14,"try_left",E,"Macro for unwrapping the left side of an `Either`, which…",N,N],[14,"try_right",E,"Dual to `try_left!`, see its documentation for more…",N,N],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[63],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,"deref",E,E,0,[[["self"]]]],[11,R[30],E,E,0,[[["self"]]]],[11,"eq",E,E,0,[[["self"],["either"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["either"]],["bool"]]],[11,"cmp",E,E,0,[[["self"],["either"]],[R[65]]]],[11,R[187],E,E,0,[[["self"],["either"]],[[R[65]],[R[67],[R[65]]]]]],[11,"lt",E,E,0,[[["self"],["either"]],["bool"]]],[11,"le",E,E,0,[[["self"],["either"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["either"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["either"]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__hlr"]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,R[64],E,E,0,[[["self"]],[R[67]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,"next",E,E,0,[[["self"]],[R[67]]]],[11,R[68],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],["usize"]]],[11,"last",E,E,0,[[],[R[67]]]],[11,"nth",E,E,0,[[["self"],["usize"]],[R[67]]]],[11,"collect",E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,"as_ref",E,E,0,[[["self"]],["target"]]],[11,"as_ref",E,E,0,[[["self"]],["str"]]],[11,"as_ref",E,E,0,[[["self"]]]],[11,"as_mut",E,E,0,[[["self"]],["str"]]],[11,"as_mut",E,E,0,[[["self"]],["target"]]],[11,"as_mut",E,E,0,[[["self"]]]],[11,"into",E,E,0,[[],[R[2]]]],[11,"from",E,E,0,[[[R[2]]],["self"]]],[11,"clone",E,E,0,[[["self"]],["either"]]]],"p":[[4,"Either"]]};
searchIndex["entities"]={"doc":"Provides the raw data needed to convert to and from HTML…","i":[[3,"Entity","entities","Represents an entry in the array of entity definitions.",N,N],[12,"entity",E,E,0,N],[12,"codepoints",E,E,0,N],[12,"characters",E,E,0,N],[4,R[321],E,"The unicode codepoint(s) for the \"character\" an entity is…",N,N],[13,"Single",E,E,1,N],[13,"Double",E,E,1,N],[7,"ENTITIES",E,"The static constant array of entity definitions.",N,N],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]]],"p":[[3,"Entity"],[4,R[321]]]};
searchIndex["fnv"]={"doc":"An implementation of the [Fowler–Noll–Vo hash…","i":[[3,R[6],"fnv","An implementation of the Fowler–Noll–Vo hash function.",N,N],[6,"FnvBuildHasher",E,"A builder for default FNV hashers.",N,N],[6,"FnvHashMap",E,"A `HashMap` using a default FNV hasher.",N,N],[6,"FnvHashSet",E,"A `HashSet` using a default FNV hasher.",N,N],[11,"with_key",E,"Create an FNV hasher starting with a state corresponding…",0,[[["u64"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[45],E,E,0,[[],[R[5]]]],[11,"finish",E,E,0,[[["self"]],["u64"]]],[11,"write",E,E,0,[[["self"]]]]],"p":[[3,R[6]]]};
searchIndex["ident_case"]={"doc":"Crate for changing case of Rust identifiers.","i":[[4,R[4],"ident_case","A casing rule for renaming Rust identifiers.",N,N],[13,"None",E,"No-op rename rule.",0,N],[13,"LowerCase",E,"Rename direct children to \"lowercase\" style.",0,N],[13,"PascalCase",E,"Rename direct children to \"PascalCase\" style, as typically…",0,N],[13,"CamelCase",E,"Rename direct children to \"camelCase\" style.",0,N],[13,"SnakeCase",E,"Rename direct children to \"snake_case\" style, as commonly…",0,N],[13,"ScreamingSnakeCase",E,"Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as…",0,N],[13,"KebabCase",E,"Rename direct children to \"kebab-case\" style.",0,N],[11,"apply_to_variant",E,"Change case of a `PascalCase` variant.",0,[[["self"],["str"],["asref",["str"]]],[R[1]]]],[11,"apply_to_field",E,"Change case of a `snake_case` field.",0,[[["self"],["str"],["asref",["str"]]],[R[1]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[45],E,E,0,[[],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[3]]]],[11,"eq",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"from_str",E,E,0,[[["str"]],[R[2]]]]],"p":[[4,R[4]]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","i":[[5,"initialize",R[14],"Takes a shared reference to a lazy static and initializes…",N,[[[T]]]],[8,"LazyStatic",E,"Support trait for enabling a few common operation on lazy…",N,N],[14,R[14],E,E,N,N]],"p":[]};
searchIndex["maplit"]={"doc":"Macros for container literals with specific type.","i":[[14,"hashmap","maplit","Create a HashMap from a list of key-value pairs",N,N],[14,"hashset",E,"Create a HashSet from a list of elements.",N,N],[14,"btreemap",E,"Create a BTreeMap from a list of key-value pairs",N,N],[14,"btreeset",E,"Create a BTreeSet from a list of elements.",N,N],[14,"convert_args",E,"Macro that converts the keys or key-value pairs passed to…",N,N]],"p":[]};
searchIndex["matches"]={"doc":E,"i":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches",E,"Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches",E,"Assert that an expression matches a refutable pattern…",N,N]],"p":[]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","i":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new",E,"Create a new NoDrop.",0,[[[T]],["nodrop"]]],[11,R[28],E,"Extract the inner value.",0,[[],[T]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,"deref",E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[T]]],[11,"drop",E,E,0,[[["self"]]]]],"p":[[3,"NoDrop"]]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the…","i":[[3,"AsciiSet","percent_encoding","Represents a set of characters or bytes in the ASCII range.",N,N],[3,R[320],E,"The return type of [`percent_encode`] and…",N,N],[3,R[319],E,"The return type of [`percent_decode`].",N,N],[5,"percent_encode_byte",E,"Return the percent-encoding of the given byte.",N,[[["u8"]],["str"]]],[5,"percent_encode",E,"Percent-encode the given bytes with the given set.",N,[[["asciiset"]],[R[316]]]],[5,"utf8_percent_encode",E,"Percent-encode the UTF-8 encoding of the given string.",N,[[["asciiset"],["str"]],[R[316]]]],[5,"percent_decode_str",E,"Percent-decode the given string.",N,[[["str"]],[R[317]]]],[5,"percent_decode",E,"Percent-decode the given bytes.",N,[[],[R[317]]]],[17,"CONTROLS",E,"The set of 0x00 to 0x1F (C0 controls), and 0x7F (DEL).",N,N],[17,"NON_ALPHANUMERIC",E,"Everything that is not an ASCII letter or digit.",N,N],[11,"add",E,E,0,[[["self"],["u8"]],["self"]]],[11,"remove",E,E,0,[[["self"],["u8"]],["self"]]],[11,"decode_utf8",E,"Decode the result of percent-decoding as UTF-8.",1,[[],[[R[2],["cow",R[318]]],["cow",["str"]],[R[318]]]]],[11,"decode_utf8_lossy",E,"Decode the result of percent-decoding as UTF-8, lossily.",1,[[],[["str"],["cow",["str"]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[63],E,E,2,[[],["i"]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[173],E,E,2,[[["self"]],[R[1]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[63],E,E,1,[[],["i"]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,"clone",E,E,2,[[["self"]],[R[316]]]],[11,"clone",E,E,1,[[["self"]],[R[317]]]],[11,"next",E,E,2,[[["self"]],[[R[67],["str"]],["str"]]]],[11,R[68],E,E,2,[[["self"]]]],[11,"next",E,E,1,[[["self"]],[[R[67],["u8"]],["u8"]]]],[11,R[68],E,E,1,[[["self"]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]]],"p":[[3,"AsciiSet"],[3,R[319]],[3,R[320]]]};
searchIndex["ppv_lite86"]={"doc":E,"i":[[0,"x86_64",R[38],E,N,N],[3,"YesS3",R[40],E,N,N],[3,"NoS3",E,E,N,N],[3,"YesS4",E,E,N,N],[3,"NoS4",E,E,N,N],[3,"YesA1",E,E,N,N],[3,"NoA1",E,E,N,N],[3,"YesA2",E,E,N,N],[3,"NoA2",E,E,N,N],[3,"YesNI",E,E,N,N],[3,"NoNI",E,E,N,N],[3,R[52],E,E,N,N],[3,R[53],E,E,N,N],[19,R[42],E,"Generic wrapper for unparameterized storage of any of the…",N,N],[19,R[43],E,E,N,N],[19,R[44],E,E,N,N],[6,"SSE2",E,E,N,N],[6,"SSSE3",E,E,N,N],[6,"SSE41",E,E,N,N],[6,"AVX",E,"AVX but not AVX2: only 128-bit integer operations, but use…",N,N],[6,"AVX2",E,E,N,N],[11,"new128",E,E,0,[[],["self"]]],[11,R[37],E,E,0,[[]]],[11,"new128",E,E,1,[[],["self"]]],[11,R[37],E,E,1,[[]]],[8,"AndNot",R[38],E,N,N],[16,"Output",E,E,2,N],[10,"andnot",E,E,2,[[]]],[8,"BSwap",E,E,N,N],[10,"bswap",E,E,3,[[],["self"]]],[8,"ArithOps",E,"Ops that depend on word size",N,N],[8,"BitOps0",E,"Ops that are independent of word size and endian",N,N],[8,"BitOps32",E,E,N,N],[8,"BitOps64",E,E,N,N],[8,"BitOps128",E,E,N,N],[8,R[46],E,E,N,N],[10,"rotate_each_word_right7",E,E,4,[[],["self"]]],[10,"rotate_each_word_right8",E,E,4,[[],["self"]]],[10,"rotate_each_word_right11",E,E,4,[[],["self"]]],[10,"rotate_each_word_right12",E,E,4,[[],["self"]]],[10,"rotate_each_word_right16",E,E,4,[[],["self"]]],[10,"rotate_each_word_right20",E,E,4,[[],["self"]]],[10,"rotate_each_word_right24",E,E,4,[[],["self"]]],[10,"rotate_each_word_right25",E,E,4,[[],["self"]]],[8,R[47],E,E,N,N],[10,"rotate_each_word_right32",E,E,5,[[],["self"]]],[8,"RotateEachWord128",E,E,N,N],[8,R[48],E,E,N,N],[10,"unsafe_from",E,E,6,[[[T]],["self"]]],[8,"Vec2",E,"A vector composed of two elements, which may be words or…",N,N],[10,"extract",E,E,7,[[["u32"]],["w"]]],[10,"insert",E,E,7,[[["w"],["u32"]],["self"]]],[8,"Vec4",E,"A vector composed of four elements, which may be words or…",N,N],[10,"extract",E,E,8,[[["u32"]],["w"]]],[10,"insert",E,E,8,[[["w"],["u32"]],["self"]]],[8,"Words4",E,"A vector composed of four words; depending on their size,…",N,N],[10,"shuffle1230",E,E,9,[[],["self"]]],[10,"shuffle2301",E,E,9,[[],["self"]]],[10,"shuffle3012",E,E,9,[[],["self"]]],[8,R[49],E,"A vector composed one or more lanes each composed of four…",N,N],[10,"shuffle_lane_words1230",E,E,10,[[],["self"]]],[10,"shuffle_lane_words2301",E,E,10,[[],["self"]]],[10,"shuffle_lane_words3012",E,E,10,[[],["self"]]],[8,"Swap64",E,"Exchange neigboring ranges of bits of the specified size",N,N],[10,"swap1",E,E,11,[[],["self"]]],[10,"swap2",E,E,11,[[],["self"]]],[10,"swap4",E,E,11,[[],["self"]]],[10,"swap8",E,E,11,[[],["self"]]],[10,"swap16",E,E,11,[[],["self"]]],[10,"swap32",E,E,11,[[],["self"]]],[10,"swap64",E,E,11,[[],["self"]]],[8,"u32x4",E,E,N,N],[8,"u64x2",E,E,N,N],[8,"u128x1",E,E,N,N],[8,"u32x4x2",E,E,N,N],[8,"u64x2x2",E,E,N,N],[8,"u64x4",E,E,N,N],[8,"u128x2",E,E,N,N],[8,"u32x4x4",E,E,N,N],[8,"u64x2x4",E,E,N,N],[8,"u128x4",E,E,N,N],[8,R[50],E,"A vector composed of multiple 128-bit lanes.",N,N],[10,"to_lanes",E,"Split a multi-lane vector into single-lane vectors.",12,[[],["lanes"]]],[10,"from_lanes",E,"Build a multi-lane vector from individual lanes.",12,[[["lanes"]],["self"]]],[8,"VZip",E,"Combine single vectors into a multi-lane vector.",N,N],[10,"vzip",E,E,13,[[],["v"]]],[8,"Machine",E,E,N,N],[16,"u32x4",E,E,14,N],[16,"u64x2",E,E,14,N],[16,"u128x1",E,E,14,N],[16,"u32x4x2",E,E,14,N],[16,"u64x2x2",E,E,14,N],[16,"u64x4",E,E,14,N],[16,"u128x2",E,E,14,N],[16,"u32x4x4",E,E,14,N],[16,"u64x2x4",E,E,14,N],[16,"u128x4",E,E,14,N],[11,"unpack",E,E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,"read_le",E,E,14,[[],["v"]]],[11,"read_be",E,E,14,[[],["v"]]],[10,R[41],E,E,14,[[],["self"]]],[8,"Store",E,E,N,N],[10,"unpack",E,E,15,[[["s"]],["self"]]],[8,R[51],E,E,N,N],[10,"unsafe_read_le",E,E,16,[[],["self"]]],[10,"unsafe_read_be",E,E,16,[[],["self"]]],[10,"write_le",E,E,16,[[]]],[10,"write_be",E,E,16,[[]]],[14,"dispatch",E,"Generate the full set of optimized implementations to take…",N,N],[14,"dispatch_light128",E,R[39],N,N],[14,"dispatch_light256",E,R[39],N,N],[11,R[7],R[40],E,17,[[[U]],[R[2]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[8],E,E,17,[[],[R[2]]]],[11,R[9],E,E,17,[[["self"]],[T]]],[11,R[10],E,E,17,[[["self"]],[T]]],[11,R[11],E,E,17,[[["self"]],[R[23]]]],[11,R[7],E,E,18,[[[U]],[R[2]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[8],E,E,18,[[],[R[2]]]],[11,R[9],E,E,18,[[["self"]],[T]]],[11,R[10],E,E,18,[[["self"]],[T]]],[11,R[11],E,E,18,[[["self"]],[R[23]]]],[11,R[7],E,E,19,[[[U]],[R[2]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[8],E,E,19,[[],[R[2]]]],[11,R[9],E,E,19,[[["self"]],[T]]],[11,R[10],E,E,19,[[["self"]],[T]]],[11,R[11],E,E,19,[[["self"]],[R[23]]]],[11,R[7],E,E,20,[[[U]],[R[2]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[8],E,E,20,[[],[R[2]]]],[11,R[9],E,E,20,[[["self"]],[T]]],[11,R[10],E,E,20,[[["self"]],[T]]],[11,R[11],E,E,20,[[["self"]],[R[23]]]],[11,R[7],E,E,21,[[[U]],[R[2]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[8],E,E,21,[[],[R[2]]]],[11,R[9],E,E,21,[[["self"]],[T]]],[11,R[10],E,E,21,[[["self"]],[T]]],[11,R[11],E,E,21,[[["self"]],[R[23]]]],[11,R[7],E,E,22,[[[U]],[R[2]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[8],E,E,22,[[],[R[2]]]],[11,R[9],E,E,22,[[["self"]],[T]]],[11,R[10],E,E,22,[[["self"]],[T]]],[11,R[11],E,E,22,[[["self"]],[R[23]]]],[11,R[7],E,E,23,[[[U]],[R[2]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[8],E,E,23,[[],[R[2]]]],[11,R[9],E,E,23,[[["self"]],[T]]],[11,R[10],E,E,23,[[["self"]],[T]]],[11,R[11],E,E,23,[[["self"]],[R[23]]]],[11,R[7],E,E,24,[[[U]],[R[2]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[8],E,E,24,[[],[R[2]]]],[11,R[9],E,E,24,[[["self"]],[T]]],[11,R[10],E,E,24,[[["self"]],[T]]],[11,R[11],E,E,24,[[["self"]],[R[23]]]],[11,R[7],E,E,25,[[[U]],[R[2]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[8],E,E,25,[[],[R[2]]]],[11,R[9],E,E,25,[[["self"]],[T]]],[11,R[10],E,E,25,[[["self"]],[T]]],[11,R[11],E,E,25,[[["self"]],[R[23]]]],[11,R[7],E,E,26,[[[U]],[R[2]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[8],E,E,26,[[],[R[2]]]],[11,R[9],E,E,26,[[["self"]],[T]]],[11,R[10],E,E,26,[[["self"]],[T]]],[11,R[11],E,E,26,[[["self"]],[R[23]]]],[11,R[7],E,E,27,[[[U]],[R[2]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[8],E,E,27,[[],[R[2]]]],[11,R[9],E,E,27,[[["self"]],[T]]],[11,R[10],E,E,27,[[["self"]],[T]]],[11,R[11],E,E,27,[[["self"]],[R[23]]]],[11,R[7],E,E,28,[[[U]],[R[2]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[8],E,E,28,[[],[R[2]]]],[11,R[9],E,E,28,[[["self"]],[T]]],[11,R[10],E,E,28,[[["self"]],[T]]],[11,R[11],E,E,28,[[["self"]],[R[23]]]],[11,R[7],E,E,29,[[[U]],[R[2]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[8],E,E,29,[[],[R[2]]]],[11,R[9],E,E,29,[[["self"]],[T]]],[11,R[10],E,E,29,[[["self"]],[T]]],[11,R[11],E,E,29,[[["self"]],[R[23]]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[41],E,E,27,[[],["self"]]],[11,R[41],E,E,28,[[],["self"]]],[11,"unpack",E,E,29,[[[R[42]]],["self"]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"clone",E,E,17,[[["self"]],["yess3"]]],[11,"clone",E,E,18,[[["self"]],["nos3"]]],[11,"clone",E,E,19,[[["self"]],["yess4"]]],[11,"clone",E,E,20,[[["self"]],["nos4"]]],[11,"clone",E,E,21,[[["self"]],["yesa1"]]],[11,"clone",E,E,22,[[["self"]],["noa1"]]],[11,"clone",E,E,23,[[["self"]],["yesa2"]]],[11,"clone",E,E,24,[[["self"]],["noa2"]]],[11,"clone",E,E,25,[[["self"]],["yesni"]]],[11,"clone",E,E,26,[[["self"]],["noni"]]],[11,"clone",E,E,27,[[["self"]],["ssemachine"]]],[11,"clone",E,E,28,[[["self"]],["avx2machine"]]],[11,"clone",E,E,29,[[["self"]],[R[42]]]],[11,"clone",E,E,0,[[["self"]],[R[43]]]],[11,"clone",E,E,1,[[["self"]],[R[44]]]],[11,R[45],E,E,29,[[],["self"]]],[11,R[45],E,E,0,[[],["self"]]],[11,R[45],E,E,1,[[],["self"]]],[11,"unpack",R[38],E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,"read_le",E,E,14,[[],["v"]]],[11,"read_be",E,E,14,[[],["v"]]]],"p":[[19,R[43]],[19,R[44]],[8,"AndNot"],[8,"BSwap"],[8,R[46]],[8,R[47]],[8,R[48]],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,R[49]],[8,"Swap64"],[8,R[50]],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,R[51]],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,R[52]],[3,R[53]],[19,R[42]]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","i":[[3,"Parser",R[103],"A convenience parser for regular expressions.",N,N],[3,R[95],E,R[96],N,N],[4,"Error",E,"This error type encompasses any error that can be returned…",N,N],[13,"Parse",E,"An error that occurred while translating concrete syntax…",0,N],[13,"Translate",E,"An error that occurred while translating abstract syntax…",0,N],[5,"escape",E,"Escapes all regular expression meta characters in `text`.",N,[[["str"]],[R[1]]]],[5,"escape_into",E,"Escapes all meta characters in `text` and writes the…",N,[[[R[1]],["str"]]]],[5,"is_meta_character",E,"Returns true if the give character has significance in a…",N,[[["char"]],["bool"]]],[5,"is_word_character",E,"Returns true if and only if the given character is a…",N,[[["char"]],["bool"]]],[5,"is_word_byte",E,"Returns true if and only if the given character is an…",N,[[["u8"]],["bool"]]],[0,"ast",E,"Defines an abstract syntax for regular expressions.",N,N],[3,"Error",R[78],"An error that occurred while parsing a regular expression…",N,N],[3,"Span",E,"Span represents the position information of a single AST…",N,N],[12,"start",E,"The start byte offset.",1,N],[12,"end",E,"The end byte offset.",1,N],[3,"Position",E,"A single position in a regular expression.",N,N],[12,"offset",E,"The absolute offset of this position, starting at `0` from…",2,N],[12,"line",E,"The line number, starting at `1`.",2,N],[12,"column",E,"The approximate column number, starting at `1`.",2,N],[3,R[227],E,"An abstract syntax tree for a singular expression along…",N,N],[12,"ast",E,"The actual ast.",3,N],[12,"comments",E,"All comments found in the original regular expression.",3,N],[3,"Comment",E,"A comment from a regular expression with an associated span.",N,N],[12,"span",E,"The span of this comment, including the beginning `#` and…",4,N],[12,"comment",E,"The comment text, starting with the first character…",4,N],[3,R[85],E,R[86],N,N],[12,"span",E,"The span of this alternation.",5,N],[12,"asts",E,"The alternate regular expressions.",5,N],[3,"Concat",E,R[87],N,N],[12,"span",E,"The span of this concatenation.",6,N],[12,"asts",E,"The concatenation regular expressions.",6,N],[3,R[88],E,"A single literal expression.",N,N],[12,"span",E,"The span of this literal.",7,N],[12,"kind",E,"The kind of this literal.",7,N],[12,"c",E,"The Unicode scalar value corresponding to this literal.",7,N],[3,R[228],E,"A Perl character class.",N,N],[12,"span",E,R[76],8,N],[12,"kind",E,"The kind of Perl class.",8,N],[12,R[77],E,"Whether the class is negated or not. e.g., `\\d` is not…",8,N],[3,R[229],E,"An ASCII character class.",N,N],[12,"span",E,R[76],9,N],[12,"kind",E,"The kind of ASCII class.",9,N],[12,R[77],E,"Whether the class is negated or not. e.g., `[[:alpha:]]`…",9,N],[3,R[104],E,"A Unicode character class.",N,N],[12,"span",E,R[76],10,N],[12,R[77],E,"Whether this class is negated or not.",10,N],[12,"kind",E,"The kind of Unicode class.",10,N],[3,R[230],E,"A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span",E,R[76],11,N],[12,R[77],E,"Whether this class is negated or not. e.g., `[a]` is not…",11,N],[12,"kind",E,"The type of this set. A set is either a normal union of…",11,N],[3,R[231],E,"A single character class range in a set.",N,N],[12,"span",E,"The span of this range.",12,N],[12,"start",E,"The start of this range.",12,N],[12,"end",E,"The end of this range.",12,N],[3,R[232],E,"A union of items inside a character class set.",N,N],[12,"span",E,"The span of the items in this operation. e.g., the…",13,N],[12,"items",E,"The sequence of items that make up this union.",13,N],[3,R[233],E,"A Unicode character class set operation.",N,N],[12,"span",E,"The span of this operation. e.g., the `a-z--[h-p]` in…",14,N],[12,"kind",E,"The type of this set operation.",14,N],[12,"lhs",E,"The left hand side of the operation.",14,N],[12,"rhs",E,"The right hand side of the operation.",14,N],[3,R[81],E,R[82],N,N],[12,"span",E,"The span of this assertion.",15,N],[12,"kind",E,"The assertion kind, e.g., `\\b` or `^`.",15,N],[3,R[83],E,"A repetition operation applied to a regular expression.",N,N],[12,"span",E,"The span of this operation.",16,N],[12,"op",E,"The actual operation.",16,N],[12,"greedy",E,"Whether this operation was applied greedily or not.",16,N],[12,"ast",E,"The regular expression under repetition.",16,N],[3,R[234],E,"The repetition operator itself.",N,N],[12,"span",E,"The span of this operator. This includes things like `+`,…",17,N],[12,"kind",E,"The type of operation.",17,N],[3,"Group",E,R[84],N,N],[12,"span",E,"The span of this group.",18,N],[12,"kind",E,"The kind of this group.",18,N],[12,"ast",E,"The regular expression in this group.",18,N],[3,R[93],E,"A capture name.",N,N],[12,"span",E,"The span of this capture name.",19,N],[12,"name",E,"The capture name.",19,N],[12,"index",E,"The capture index.",19,N],[3,"SetFlags",E,"A group of flags that is not applied to a particular…",N,N],[12,"span",E,"The span of these flags, including the grouping parentheses.",20,N],[12,"flags",E,"The actual sequence of flags.",20,N],[3,"Flags",E,"A group of flags.",N,N],[12,"span",E,"The span of this group of flags.",21,N],[12,"items",E,"A sequence of flag items. Each item is either a flag or a…",21,N],[3,R[235],E,"A single item in a group of flags.",N,N],[12,"span",E,"The span of this item.",22,N],[12,"kind",E,"The kind of this item.",22,N],[4,R[105],E,"The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded",E,"The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid",E,"An invalid escape sequence was found in a character class…",23,N],[13,"ClassRangeInvalid",E,"An invalid character class range was found. An invalid…",23,N],[13,"ClassRangeLiteral",E,"An invalid range boundary was found in a character class.…",23,N],[13,"ClassUnclosed",E,"An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty",E,"Note that this error variant is no longer used. Namely, a…",23,N],[13,"DecimalInvalid",E,"An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty",E,"A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid",E,"A bracketed hex literal did not correspond to a Unicode…",23,N],[13,"EscapeHexInvalidDigit",E,"An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof",E,"EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized",E,"An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation",E,"A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate",E,"A flag was used twice, e.g., `i-i`.",23,N],[12,R[79],R[80],"The position of the original flag. The error position…",23,N],[13,"FlagRepeatedNegation",R[78],"The negation operator was used twice, e.g., `-i-s`.",23,N],[12,R[79],R[80],"The position of the original negation operator. The error…",23,N],[13,"FlagUnexpectedEof",R[78],"Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized",E,"Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate",E,"A duplicate capture name was found.",23,N],[12,R[79],R[80],"The position of the initial occurrence of the capture…",23,N],[13,"GroupNameEmpty",R[78],"A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid",E,"An invalid character was seen for a capture group name.…",23,N],[13,"GroupNameUnexpectedEof",E,"A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed",E,"An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened",E,"An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded",E,"The nest limit was exceeded. The limit stored here is the…",23,N],[13,"RepetitionCountInvalid",E,"The range provided in a counted repetition operator is…",23,N],[13,"RepetitionCountDecimalEmpty",E,"An opening `{` was not followed by a valid decimal value.…",23,N],[13,"RepetitionCountUnclosed",E,"An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing",E,"A repetition operator was applied to a missing…",23,N],[13,"UnsupportedBackreference",E,"When octal support is disabled, this error is produced…",23,N],[13,"UnsupportedLookAround",E,"When syntax similar to PCRE's look-around is used, this…",23,N],[4,"Ast",E,"An abstract syntax tree for a single regular expression.",N,N],[13,"Empty",E,"An empty regex that matches everything.",24,N],[13,"Flags",E,"A set of flags, e.g., `(?is)`.",24,N],[13,R[88],E,"A single character literal, which includes escape sequences.",24,N],[13,"Dot",E,"The \"any character\" class.",24,N],[13,R[81],E,R[82],24,N],[13,"Class",E,"A single character class. This includes all forms of…",24,N],[13,R[83],E,"A repetition operator applied to an arbitrary regular…",24,N],[13,"Group",E,R[84],24,N],[13,R[85],E,R[86],24,N],[13,"Concat",E,R[87],24,N],[4,R[236],E,"The kind of a single literal expression.",N,N],[13,"Verbatim",E,"The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation",E,"The literal is written as an escape because it is…",25,N],[13,"Octal",E,"The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed",E,"The literal is written as a hex code with a fixed number…",25,N],[13,"HexBrace",E,"The literal is written as a hex code with a bracketed…",25,N],[13,"Special",E,"The literal is written as a specially recognized escape,…",25,N],[4,R[237],E,"The type of a special literal.",N,N],[13,"Bell",E,"Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed",E,"Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab",E,"Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed",E,"Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn",E,"Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab",E,"Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space",E,"Space, spelled `\\ ` (`\\x20`). Note that this can only…",26,N],[4,R[238],E,"The type of a Unicode hex literal.",N,N],[13,"X",E,"A `\\x` prefix. When used without brackets, this form is…",27,N],[13,"UnicodeShort",E,"A `\\u` prefix. When used without brackets, this form is…",27,N],[13,"UnicodeLong",E,"A `\\U` prefix. When used without brackets, this form is…",27,N],[4,"Class",E,"A single character class expression.",N,N],[13,R[94],E,R[89],28,N],[13,"Perl",E,R[90],28,N],[13,R[91],E,R[92],28,N],[4,R[239],E,"The available Perl character classes.",N,N],[13,"Digit",E,"Decimal numbers.",29,N],[13,"Space",E,"Whitespace.",29,N],[13,"Word",E,"Word characters.",29,N],[4,R[240],E,"The available ASCII character classes.",N,N],[13,"Alnum",E,"`[0-9A-Za-z]`",30,N],[13,"Alpha",E,"`[A-Za-z]`",30,N],[13,"Ascii",E,"`[\\x00-\\x7F]`",30,N],[13,"Blank",E,"`[ \\t]`",30,N],[13,"Cntrl",E,"`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit",E,"`[0-9]`",30,N],[13,"Graph",E,"`[!-~]`",30,N],[13,"Lower",E,"`[a-z]`",30,N],[13,"Print",E,"`[ -~]`",30,N],[13,"Punct",E,"`[!-/:-@\\[-`{-~]`",30,N],[13,"Space",E,"`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper",E,"`[A-Z]`",30,N],[13,"Word",E,"`[0-9A-Za-z_]`",30,N],[13,"Xdigit",E,"`[0-9A-Fa-f]`",30,N],[4,R[241],E,"The available forms of Unicode character classes.",N,N],[13,"OneLetter",E,"A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named",E,"A binary property, general category or script. The string…",31,N],[13,"NamedValue",E,"A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with…",31,N],[12,"name",E,"The property name (which may be empty).",31,N],[12,"value",E,"The property value (which may be empty).",31,N],[4,R[242],R[78],"The type of op used in a Unicode character class.",N,N],[13,"Equal",E,"A property set to a specific value, e.g.,…",32,N],[13,"Colon",E,"A property set to a specific value using a colon, e.g.,…",32,N],[13,"NotEqual",E,"A property that isn't a particular value, e.g.,…",32,N],[4,"ClassSet",E,"A character class set.",N,N],[13,"Item",E,"An item, which can be a single literal, range, nested…",33,N],[13,"BinaryOp",E,"A single binary operation (i.e., &&, -- or ~~).",33,N],[4,R[243],E,"A single component of a character class set.",N,N],[13,"Empty",E,"An empty item.",34,N],[13,R[88],E,"A single literal.",34,N],[13,"Range",E,"A range between two literals.",34,N],[13,"Ascii",E,"An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,R[94],E,R[89],34,N],[13,"Perl",E,R[90],34,N],[13,R[91],E,R[92],34,N],[13,"Union",E,"A union of items.",34,N],[4,R[244],E,"The type of a Unicode character class set operation.",N,N],[13,"Intersection",E,"The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference",E,"The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference",E,"The symmetric difference of two sets. The symmetric…",35,N],[4,R[245],E,"An assertion kind.",N,N],[13,R[108],E,"`^`",36,N],[13,"EndLine",E,"`$`",36,N],[13,R[109],E,"`\\A`",36,N],[13,"EndText",E,"`\\z`",36,N],[13,R[106],E,"`\\b`",36,N],[13,"NotWordBoundary",E,"`\\B`",36,N],[4,R[114],E,R[115],N,N],[13,R[116],E,"`?`",37,N],[13,R[117],E,"`*`",37,N],[13,R[118],E,"`+`",37,N],[13,"Range",E,"`{m,n}`",37,N],[4,R[119],E,"A range repetition operator.",N,N],[13,"Exactly",E,"`{m}`",38,N],[13,"AtLeast",E,"`{m,}`",38,N],[13,"Bounded",E,"`{m,n}`",38,N],[4,R[110],E,"The kind of a group.",N,N],[13,R[111],E,"`(a)`",39,N],[13,R[93],E,"`(?P<name>a)`",39,N],[13,R[112],E,"`(?:a)` and `(?i:a)`",39,N],[4,R[246],E,"The kind of an item in a group of flags.",N,N],[13,"Negation",E,"A negation operator applied to all subsequent flags in the…",40,N],[13,"Flag",E,"A single flag in a group.",40,N],[4,"Flag",E,"A single flag.",N,N],[13,"CaseInsensitive",E,"`i`",41,N],[13,"MultiLine",E,"`m`",41,N],[13,"DotMatchesNewLine",E,"`s`",41,N],[13,"SwapGreed",E,"`U`",41,N],[13,R[94],E,"`u`",41,N],[13,"IgnoreWhitespace",E,"`x`",41,N],[5,"visit",E,R[120],N,[[["ast"],["visitor"]],[R[2]]]],[0,"parse",E,"This module provides a regular expression parser.",N,N],[3,R[95],R[174],R[96],N,N],[3,"Parser",E,"A regular expression parser.",N,N],[11,"new",E,R[159],42,[[],[R[97]]]],[11,"build",E,R[160],42,[[["self"]],["parser"]]],[11,R[161],E,R[162],42,[[["self"],["u32"]],[R[97]]]],[11,"octal",E,R[163],42,[[["self"],["bool"]],[R[97]]]],[11,R[165],E,R[166],42,[[["self"],["bool"]],[R[97]]]],[11,"new",E,R[172],43,[[],["parser"]]],[11,"parse",E,"Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],[["ast"],[R[2],["ast","error"]],["error"]]]],[11,"parse_with_comments",E,"Parse the regular expression and return an abstract syntax…",43,[[["self"],["str"]],[[R[98]],[R[2],[R[98],"error"]],["error"]]]],[0,"print",R[78],"This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer",R[175],"A printer for a regular expression abstract syntax tree.",N,N],[11,"new",E,R[123],44,[[],["printer"]]],[11,"print",E,R[124],44,[[["self"],["write"],["ast"]],[R[2]]]],[8,"Visitor",R[78],"A trait for visiting an abstract syntax tree (AST) in…",N,N],[16,"Output",E,"The result of visiting an AST.",45,N],[16,"Err",E,"An error that visiting an AST might return.",45,N],[10,"finish",E,R[128],45,[[],[R[2]]]],[11,"start",E,R[209],45,[[["self"]]]],[11,R[129],E,R[210],45,[[["self"],["ast"]],[R[2]]]],[11,R[130],E,R[211],45,[[["self"],["ast"]],[R[2]]]],[11,R[131],E,R[212],45,[[["self"]],[R[2]]]],[11,R[213],E,R[214],45,[[["self"],[R[99]]],[R[2]]]],[11,R[215],E,R[216],45,[[["self"],[R[99]]],[R[2]]]],[11,R[217],E,R[218],45,[[["self"],[R[100]]],[R[2]]]],[11,R[219],E,R[220],45,[[["self"],[R[100]]],[R[2]]]],[11,R[221],E,R[222],45,[[["self"],[R[100]]],[R[2]]]],[11,"kind",E,R[132],46,[[["self"]],[R[133]]]],[11,"pattern",E,R[134],46,[[["self"]],["str"]]],[11,"span",E,R[135],46,[[["self"]],["span"]]],[11,"auxiliary_span",E,"Return an auxiliary span. This span exists only for some…",46,[[["self"]],[["span"],[R[67],["span"]]]]],[11,"new",E,"Create a new span with the given positions.",1,[[[R[101]]],["span"]]],[11,"splat",E,"Create a new span using the given position as the start…",1,[[[R[101]]],["span"]]],[11,"with_start",E,"Create a new span by replacing the starting the position…",1,[[[R[101]]],["span"]]],[11,"with_end",E,"Create a new span by replacing the ending the position…",1,[[[R[101]]],["span"]]],[11,"is_one_line",E,"Returns true if and only if this span occurs on a single…",1,[[["self"]],["bool"]]],[11,R[122],E,"Returns true if and only if this span is empty. That is,…",1,[[["self"]],["bool"]]],[11,"new",E,"Create a new position with the given information.",2,[[["usize"]],[R[101]]]],[11,"span",E,"Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,R[122],E,"Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"into_ast",E,"Return this alternation as an AST.",5,[[],["ast"]]],[11,"into_ast",E,"Return this concatenation as an AST.",6,[[],["ast"]]],[11,"byte",E,"If this literal was written as a `\\x` hex escape, then…",7,[[["self"]],[[R[67],["u8"]],["u8"]]]],[11,"digits",E,"The number of digits that must be used with this literal…",27,[[["self"]],["u32"]]],[11,"span",E,"Return the span of this character class.",28,[[["self"]],["span"]]],[11,"from_name",E,"Return the corresponding ClassAsciiKind variant for the…",30,[[["str"]],[[R[67],[R[102]]],[R[102]]]]],[11,R[157],E,"Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"is_equal",E,"Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"union",E,"Build a set from a union.",33,[[[R[181]]],[R[197]]]],[11,"span",E,"Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"span",E,"Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"is_valid",E,"Returns true if and only if this character class range is…",12,[[["self"]],["bool"]]],[11,"push",E,"Push a new item in this union.",13,[[["self"],[R[99]]]]],[11,"into_item",E,"Return this union as a character class set item.",13,[[],[R[99]]]],[11,"is_valid",E,"Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"flags",E,"If this group is non-capturing, then this returns the…",18,[[["self"]],[[R[67],["flags"]],["flags"]]]],[11,"is_capturing",E,"Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index",E,"Returns the capture index of this group, if this is a…",18,[[["self"]],[[R[67],["u32"]],["u32"]]]],[11,"add_item",E,"Add the given item to this sequence of flags.",21,[[["self"],[R[182]]],[[R[67],["usize"]],["usize"]]]],[11,"flag_state",E,"Returns the state of the given flag in this set.",21,[[["self"],["flag"]],[[R[67],["bool"]],["bool"]]]],[11,"is_negation",E,"Returns true if and only if this item is a negation…",40,[[["self"]],["bool"]]],[0,"hir",R[103],"Defines a high-level intermediate representation for…",N,N],[3,"Error",R[113],"An error that can occur while translating an `Ast` to a…",N,N],[3,"Hir",E,"A high-level intermediate representation (HIR) for a…",N,N],[3,R[104],E,R[107],N,N],[3,R[255],E,"An iterator over all ranges in a Unicode character class.",N,N],[3,R[249],E,"A single range of characters represented by Unicode scalar…",N,N],[3,R[250],E,"A set of characters represented by arbitrary bytes (where…",N,N],[3,R[256],E,"An iterator over all ranges in a byte character class.",N,N],[3,R[251],E,"A single range of characters represented by arbitrary bytes.",N,N],[3,"Group",E,"The high-level intermediate representation for a group.",N,N],[12,"kind",E,"The kind of this group. If it is a capturing group, then…",47,N],[12,"hir",E,"The expression inside the capturing group, which may be…",47,N],[3,R[83],E,"The high-level intermediate representation of a repetition…",N,N],[12,"kind",E,"The kind of this repetition operator.",48,N],[12,"greedy",E,"Whether this repetition operator is greedy or not. A…",48,N],[12,"hir",E,"The expression being repeated.",48,N],[4,R[105],E,"The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed",E,"This error occurs when a Unicode feature is used when…",49,N],[13,"InvalidUtf8",E,"This error occurs when translating a pattern that could…",49,N],[13,"UnicodePropertyNotFound",E,"This occurs when an unrecognized Unicode property name…",49,N],[13,"UnicodePropertyValueNotFound",E,"This occurs when an unrecognized Unicode property value…",49,N],[13,"EmptyClassNotAllowed",E,"This occurs when the translator attempts to construct a…",49,N],[4,"HirKind",E,"The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty",E,"The empty regular expression, which matches everything,…",50,N],[13,R[88],E,"A single literal character that matches exactly this…",50,N],[13,"Class",E,"A single character class that matches any of the…",50,N],[13,"Anchor",E,"An anchor assertion. An anchor assertion match always has…",50,N],[13,R[106],E,"A word boundary assertion, which may or may not be Unicode…",50,N],[13,R[83],E,"A repetition operation applied to a child expression.",50,N],[13,"Group",E,"A possibly capturing group, which contains a child…",50,N],[13,"Concat",E,"A concatenation of expressions. A concatenation always has…",50,N],[13,R[85],E,"An alternation of expressions. An alternation always has…",50,N],[4,R[88],E,"The high-level intermediate representation of a literal.",N,N],[13,R[94],E,"A single character represented by a Unicode scalar value.",51,N],[13,"Byte",E,"A single character represented by an arbitrary byte.",51,N],[4,"Class",E,"The high-level intermediate representation of a character…",N,N],[13,R[94],E,R[107],52,N],[13,"Bytes",E,"A set of characters represented by arbitrary bytes (one…",52,N],[4,"Anchor",E,"The high-level intermediate representation for an anchor…",N,N],[13,R[108],E,"Match the beginning of a line or the beginning of text.…",53,N],[13,"EndLine",E,"Match the end of a line or the end of text. Specifically,…",53,N],[13,R[109],E,"Match the beginning of text. Specifically, this matches at…",53,N],[13,"EndText",E,"Match the end of text. Specifically, this matches at the…",53,N],[4,R[106],E,"The high-level intermediate representation for a…",N,N],[13,R[94],E,"Match a Unicode-aware word boundary. That is, this matches…",54,N],[13,"UnicodeNegate",E,"Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii",E,"Match an ASCII-only word boundary. That is, this matches a…",54,N],[13,"AsciiNegate",E,"Match an ASCII-only negation of a word boundary.",54,N],[4,R[110],E,"The kind of group.",N,N],[13,R[111],E,"A normal unnamed capturing group.",55,N],[13,R[93],E,"A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index",E,"The capture index of the group.",55,N],[13,R[112],R[113],"A non-capturing group.",55,N],[4,R[114],E,R[115],N,N],[13,R[116],E,"Matches a sub-expression zero or one times.",56,N],[13,R[117],E,"Matches a sub-expression zero or more times.",56,N],[13,R[118],E,"Matches a sub-expression one or more times.",56,N],[13,"Range",E,"Matches a sub-expression within a bounded range of times.",56,N],[4,R[119],E,"The kind of a counted repetition operator.",N,N],[13,"Exactly",E,"Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast",E,"Matches a sub-expression at least this many times.",57,N],[13,"Bounded",E,"Matches a sub-expression at least `m` times and at most…",57,N],[5,"visit",E,R[120],N,[[["visitor"],["hir"]],[R[2]]]],[0,R[136],E,"Provides routines for extracting literal prefixes and…",N,N],[3,"Literals",R[176],"A set of literal byte strings extracted from a regular…",N,N],[3,R[88],E,"A single member of a set of literals extracted from a…",N,N],[11,"empty",E,"Returns a new empty set of literals using default limits.",58,[[],[R[121]]]],[11,"prefixes",E,"Returns a set of literal prefixes extracted from the given…",58,[[["hir"]],[R[121]]]],[11,"suffixes",E,"Returns a set of literal suffixes extracted from the given…",58,[[["hir"]],[R[121]]]],[11,"limit_size",E,"Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size",E,"Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],[R[121]]]],[11,"limit_class",E,"Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class",E,"Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],[R[121]]]],[11,R[121],E,"Returns the set of literals as a slice. Its order is…",58,[[["self"]]]],[11,"min_len",E,"Returns the length of the smallest literal.",58,[[["self"]],[[R[67],["usize"]],["usize"]]]],[11,"all_complete",E,"Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete",E,"Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty",E,"Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,R[122],E,"Returns true if this set is empty or if all of its members…",58,[[["self"]],["bool"]]],[11,"to_empty",E,"Returns a new empty set of literals using this set's limits.",58,[[["self"]],[R[121]]]],[11,"longest_common_prefix",E,"Returns the longest common prefix of all members in this…",58,[[["self"]]]],[11,"longest_common_suffix",E,"Returns the longest common suffix of all members in this…",58,[[["self"]]]],[11,"trim_suffix",E,"Returns a new set of literals with the given number of…",58,[[["self"],["usize"]],[[R[121]],[R[67],[R[121]]]]]],[11,"unambiguous_prefixes",E,"Returns a new set of prefixes of this set of literals that…",58,[[["self"]],[R[121]]]],[11,"unambiguous_suffixes",E,"Returns a new set of suffixes of this set of literals that…",58,[[["self"]],[R[121]]]],[11,"union_prefixes",E,"Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes",E,"Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union",E,"Unions this set with another set.",58,[[["self"],[R[121]]],["bool"]]],[11,"cross_product",E,"Extends this set with another set.",58,[[["self"],[R[121]]],["bool"]]],[11,"cross_add",E,"Extends each literal in this set with the bytes given.",58,[[["self"]],["bool"]]],[11,"add",E,"Adds the given literal to this set.",58,[[["self"],[R[136]]],["bool"]]],[11,"add_char_class",E,"Extends each literal in this set with the character class…",58,[[["self"],[R[141]]],["bool"]]],[11,"add_byte_class",E,"Extends each literal in this set with the byte class given.",58,[[["self"],[R[145]]],["bool"]]],[11,"cut",E,"Cuts every member of this set. When a member is cut, it…",58,[[["self"]]]],[11,"reverse",E,"Reverses all members in place.",58,[[["self"]]]],[11,"clear",E,"Clears this set of all members.",58,[[["self"]]]],[11,"new",E,"Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]],["u8"]],[R[136]]]],[11,"empty",E,"Returns a new complete empty literal.",59,[[],[R[136]]]],[11,"is_cut",E,"Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut",E,"Cuts this literal.",59,[[["self"]]]],[0,"print",R[113],"This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer",R[177],"A printer for a regular expression's high-level…",N,N],[11,"new",E,R[123],60,[[],["printer"]]],[11,"print",E,R[124],60,[[["self"],["write"],["hir"]],[R[2]]]],[0,R[127],R[113],"Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,R[247],R[178],"A builder for constructing an AST->HIR translator.",N,N],[3,R[248],E,"A translator maps abstract syntax to a high level…",N,N],[11,"new",E,"Create a new translator builder with a default c…",61,[[],[R[125]]]],[11,"build",E,"Build a translator using the current configuration.",61,[[["self"]],[R[126]]]],[11,R[164],E,"When enabled, translation will permit the construction of…",61,[[["self"],["bool"]],[R[125]]]],[11,R[167],E,"Enable or disable the case insensitive flag (`i`) by…",61,[[["self"],["bool"]],[R[125]]]],[11,R[168],E,"Enable or disable the multi-line matching flag (`m`) by…",61,[[["self"],["bool"]],[R[125]]]],[11,R[169],E,"Enable or disable the \"dot matches any character\" flag…",61,[[["self"],["bool"]],[R[125]]]],[11,R[170],E,"Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],[R[125]]]],[11,"unicode",E,R[171],61,[[["self"],["bool"]],[R[125]]]],[11,"new",E,"Create a new translator using the default configuration.",62,[[],[R[126]]]],[11,R[127],E,"Translate the given abstract syntax tree (AST) into a high…",62,[[["self"],["str"],["ast"]],[["hir"],["error"],[R[2],["hir","error"]]]]],[8,"Visitor",R[113],"A trait for visiting the high-level IR (HIR) in depth…",N,N],[16,"Output",E,"The result of visiting an HIR.",63,N],[16,"Err",E,"An error that visiting an HIR might return.",63,N],[10,"finish",E,R[128],63,[[],[R[2]]]],[11,"start",E,R[223],63,[[["self"]]]],[11,R[129],E,R[224],63,[[["self"],["hir"]],[R[2]]]],[11,R[130],E,R[225],63,[[["self"],["hir"]],[R[2]]]],[11,R[131],E,R[226],63,[[["self"]],[R[2]]]],[11,"kind",E,R[132],64,[[["self"]],[R[133]]]],[11,"pattern",E,R[134],64,[[["self"]],["str"]]],[11,"span",E,R[135],64,[[["self"]],["span"]]],[11,"kind",E,"Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind",E,"Consumes ownership of this HIR expression and returns its…",65,[[],["hirkind"]]],[11,"empty",E,"Returns an empty HIR expression.",65,[[],["hir"]]],[11,R[136],E,"Creates a literal HIR expression.",65,[[[R[136]]],["hir"]]],[11,"class",E,"Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor",E,"Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary",E,"Creates a word boundary assertion HIR expression.",65,[[[R[183]]],["hir"]]],[11,R[137],E,"Creates a repetition HIR expression.",65,[[[R[137]]],["hir"]]],[11,"group",E,"Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat",E,"Returns the concatenation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,R[180],E,"Returns the alternation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,"dot",E,"Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any",E,"Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,R[140],E,"Return true if and only if this HIR will always match…",65,[[["self"]],["bool"]]],[11,"is_all_assertions",E,"Returns true if and only if this entire HIR expression is…",65,[[["self"]],["bool"]]],[11,"is_anchored_start",E,R[138],65,[[["self"]],["bool"]]],[11,"is_anchored_end",E,R[138],65,[[["self"]],["bool"]]],[11,"is_line_anchored_start",E,R[138],65,[[["self"]],["bool"]]],[11,"is_line_anchored_end",E,R[138],65,[[["self"]],["bool"]]],[11,"is_any_anchored_start",E,R[139],65,[[["self"]],["bool"]]],[11,"is_any_anchored_end",E,R[139],65,[[["self"]],["bool"]]],[11,R[158],E,"Return true if and only if the empty string is part of the…",65,[[["self"]],["bool"]]],[11,"is_literal",E,"Return true if and only if this HIR is a simple literal.…",65,[[["self"]],["bool"]]],[11,"is_alternation_literal",E,"Return true if and only if this HIR is either a simple…",65,[[["self"]],["bool"]]],[11,R[122],E,"Return true if and only if this HIR is the empty regular…",50,[[["self"]],["bool"]]],[11,"has_subexprs",E,"Returns true if and only if this kind has any (including…",50,[[["self"]],["bool"]]],[11,"is_unicode",E,"Returns true if and only if this literal corresponds to a…",51,[[["self"]],["bool"]]],[11,R[142],E,"Apply Unicode simple case folding to this character class,…",52,[[["self"]]]],[11,"negate",E,"Negate this character class in place.",52,[[["self"]]]],[11,R[140],E,"Returns true if and only if this character class will only…",52,[[["self"]],["bool"]]],[11,"new",E,R[144],66,[[["i"]],[R[141]]]],[11,"empty",E,R[146],66,[[],[R[141]]]],[11,"push",E,R[147],66,[[["self"],[R[143]]]]],[11,"iter",E,R[148],66,[[["self"]],["classunicodeiter"]]],[11,"ranges",E,R[149],66,[[["self"]]]],[11,R[142],E,R[150],66,[[["self"]]]],[11,"negate",E,"Negate this character class.",66,[[["self"]]]],[11,"union",E,"Union this character class with the given character class,…",66,[[["self"],[R[141]]]]],[11,R[151],E,"Intersect this character class with the given character…",66,[[["self"],[R[141]]]]],[11,R[152],E,"Subtract the given character class from this character…",66,[[["self"],[R[141]]]]],[11,R[153],E,"Compute the symmetric difference of the given character…",66,[[["self"],[R[141]]]]],[11,"new",E,"Create a new Unicode scalar value range for a character…",67,[[["char"]],[R[143]]]],[11,"start",E,R[155],67,[[["self"]],["char"]]],[11,"end",E,R[156],67,[[["self"]],["char"]]],[11,"new",E,R[144],68,[[["i"]],[R[145]]]],[11,"empty",E,R[146],68,[[],[R[145]]]],[11,"push",E,R[147],68,[[["self"],[R[154]]]]],[11,"iter",E,R[148],68,[[["self"]],["classbytesiter"]]],[11,"ranges",E,R[149],68,[[["self"]]]],[11,R[142],E,R[150],68,[[["self"]]]],[11,"negate",E,"Negate this byte class.",68,[[["self"]]]],[11,"union",E,"Union this byte class with the given byte class, in place.",68,[[["self"],[R[145]]]]],[11,R[151],E,"Intersect this byte class with the given byte class, in…",68,[[["self"],[R[145]]]]],[11,R[152],E,"Subtract the given byte class from this byte class, in…",68,[[["self"],[R[145]]]]],[11,R[153],E,"Compute the symmetric difference of the given byte…",68,[[["self"],[R[145]]]]],[11,"is_all_ascii",E,"Returns true if and only if this character class will…",68,[[["self"]],["bool"]]],[11,"new",E,"Create a new byte range for a character class.",69,[[["u8"]],[R[154]]]],[11,"start",E,R[155],69,[[["self"]],["u8"]]],[11,"end",E,R[156],69,[[["self"]],["u8"]]],[11,R[157],E,"Returns true if and only if this word boundary assertion…",54,[[["self"]],["bool"]]],[11,R[158],E,"Returns true if and only if this repetition operator makes…",48,[[["self"]],["bool"]]],[11,"new",R[103],R[159],70,[[],[R[97]]]],[11,"build",E,R[160],70,[[["self"]],["parser"]]],[11,R[161],E,R[162],70,[[["self"],["u32"]],[R[97]]]],[11,"octal",E,R[163],70,[[["self"],["bool"]],[R[97]]]],[11,R[164],E,"When enabled, the parser will permit the construction of a…",70,[[["self"],["bool"]],[R[97]]]],[11,R[165],E,R[166],70,[[["self"],["bool"]],[R[97]]]],[11,R[167],E,"Enable or disable the case insensitive flag by default.",70,[[["self"],["bool"]],[R[97]]]],[11,R[168],E,"Enable or disable the multi-line matching flag by default.",70,[[["self"],["bool"]],[R[97]]]],[11,R[169],E,"Enable or disable the \"dot matches any character\" flag by…",70,[[["self"],["bool"]],[R[97]]]],[11,R[170],E,"Enable or disable the \"swap greed\" flag by default.",70,[[["self"],["bool"]],[R[97]]]],[11,"unicode",E,R[171],70,[[["self"],["bool"]],[R[97]]]],[11,"new",E,R[172],71,[[],["parser"]]],[11,"parse",E,"Parse the regular expression into a high level…",71,[[["self"],["str"]],[["hir"],[R[2],["hir"]]]]],[0,"utf8",E,"Converts ranges of Unicode scalar values to equivalent…",N,N],[3,R[252],R[179],"A single inclusive range of UTF-8 bytes.",N,N],[12,"start",E,"Start of byte range (inclusive).",72,N],[12,"end",E,"End of byte range (inclusive).",72,N],[3,R[254],E,"An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,R[253],E,"Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One",E,"One byte range.",73,N],[13,"Two",E,"Two successive byte ranges.",73,N],[13,"Three",E,"Three successive byte ranges.",73,N],[13,"Four",E,"Four successive byte ranges.",73,N],[11,R[75],E,"Returns the underlying sequence of byte ranges as a slice.",73,[[["self"]]]],[11,"len",E,"Returns the number of byte ranges in this sequence.",73,[[["self"]],["usize"]]],[11,"matches",E,"Returns true if and only if a prefix of `bytes` matches…",73,[[["self"]],["bool"]]],[11,"matches",E,"Returns true if and only if the given byte is in this range.",72,[[["self"],["u8"]],["bool"]]],[11,"new",E,"Create a new iterator over UTF-8 byte ranges for the…",74,[[["char"]],["self"]]],[6,"Result",R[103],"A type alias for dealing with errors returned by this crate.",N,N],[11,R[21],E,E,71,[[["self"]],[T]]],[11,R[22],E,E,71,[[["self"],[T]]]],[11,"from",E,E,71,[[[T]],[T]]],[11,"into",E,E,71,[[],[U]]],[11,R[7],E,E,71,[[[U]],[R[2]]]],[11,R[8],E,E,71,[[],[R[2]]]],[11,R[9],E,E,71,[[["self"]],[T]]],[11,R[10],E,E,71,[[["self"]],[T]]],[11,R[11],E,E,71,[[["self"]],[R[23]]]],[11,R[21],E,E,70,[[["self"]],[T]]],[11,R[22],E,E,70,[[["self"],[T]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,"into",E,E,70,[[],[U]]],[11,R[7],E,E,70,[[[U]],[R[2]]]],[11,R[8],E,E,70,[[],[R[2]]]],[11,R[9],E,E,70,[[["self"]],[T]]],[11,R[10],E,E,70,[[["self"]],[T]]],[11,R[11],E,E,70,[[["self"]],[R[23]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[173],E,E,0,[[["self"]],[R[1]]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[21],R[78],E,46,[[["self"]],[T]]],[11,R[22],E,E,46,[[["self"],[T]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[173],E,E,46,[[["self"]],[R[1]]]],[11,R[7],E,E,46,[[[U]],[R[2]]]],[11,R[8],E,E,46,[[],[R[2]]]],[11,R[9],E,E,46,[[["self"]],[T]]],[11,R[10],E,E,46,[[["self"]],[T]]],[11,R[11],E,E,46,[[["self"]],[R[23]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,R[21],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[23]]]],[11,R[21],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[],[R[2]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[23]]]],[11,R[21],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[7],E,E,7,[[[U]],[R[2]]]],[11,R[8],E,E,7,[[],[R[2]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[23]]]],[11,R[21],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[7],E,E,8,[[[U]],[R[2]]]],[11,R[8],E,E,8,[[],[R[2]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[23]]]],[11,R[21],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[7],E,E,9,[[[U]],[R[2]]]],[11,R[8],E,E,9,[[],[R[2]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[23]]]],[11,R[21],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"],[T]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[7],E,E,10,[[[U]],[R[2]]]],[11,R[8],E,E,10,[[],[R[2]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[["self"]],[T]]],[11,R[11],E,E,10,[[["self"]],[R[23]]]],[11,R[21],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"],[T]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[7],E,E,11,[[[U]],[R[2]]]],[11,R[8],E,E,11,[[],[R[2]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[["self"]],[T]]],[11,R[11],E,E,11,[[["self"]],[R[23]]]],[11,R[21],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"],[T]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[7],E,E,12,[[[U]],[R[2]]]],[11,R[8],E,E,12,[[],[R[2]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[["self"]],[T]]],[11,R[11],E,E,12,[[["self"]],[R[23]]]],[11,R[21],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"],[T]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[7],E,E,13,[[[U]],[R[2]]]],[11,R[8],E,E,13,[[],[R[2]]]],[11,R[9],E,E,13,[[["self"]],[T]]],[11,R[10],E,E,13,[[["self"]],[T]]],[11,R[11],E,E,13,[[["self"]],[R[23]]]],[11,R[21],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"],[T]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[7],E,E,14,[[[U]],[R[2]]]],[11,R[8],E,E,14,[[],[R[2]]]],[11,R[9],E,E,14,[[["self"]],[T]]],[11,R[10],E,E,14,[[["self"]],[T]]],[11,R[11],E,E,14,[[["self"]],[R[23]]]],[11,R[21],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"],[T]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[7],E,E,15,[[[U]],[R[2]]]],[11,R[8],E,E,15,[[],[R[2]]]],[11,R[9],E,E,15,[[["self"]],[T]]],[11,R[10],E,E,15,[[["self"]],[T]]],[11,R[11],E,E,15,[[["self"]],[R[23]]]],[11,R[21],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"],[T]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[7],E,E,16,[[[U]],[R[2]]]],[11,R[8],E,E,16,[[],[R[2]]]],[11,R[9],E,E,16,[[["self"]],[T]]],[11,R[10],E,E,16,[[["self"]],[T]]],[11,R[11],E,E,16,[[["self"]],[R[23]]]],[11,R[21],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"],[T]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[7],E,E,17,[[[U]],[R[2]]]],[11,R[8],E,E,17,[[],[R[2]]]],[11,R[9],E,E,17,[[["self"]],[T]]],[11,R[10],E,E,17,[[["self"]],[T]]],[11,R[11],E,E,17,[[["self"]],[R[23]]]],[11,R[21],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"],[T]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[7],E,E,18,[[[U]],[R[2]]]],[11,R[8],E,E,18,[[],[R[2]]]],[11,R[9],E,E,18,[[["self"]],[T]]],[11,R[10],E,E,18,[[["self"]],[T]]],[11,R[11],E,E,18,[[["self"]],[R[23]]]],[11,R[21],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"],[T]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[7],E,E,19,[[[U]],[R[2]]]],[11,R[8],E,E,19,[[],[R[2]]]],[11,R[9],E,E,19,[[["self"]],[T]]],[11,R[10],E,E,19,[[["self"]],[T]]],[11,R[11],E,E,19,[[["self"]],[R[23]]]],[11,R[21],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"],[T]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[7],E,E,20,[[[U]],[R[2]]]],[11,R[8],E,E,20,[[],[R[2]]]],[11,R[9],E,E,20,[[["self"]],[T]]],[11,R[10],E,E,20,[[["self"]],[T]]],[11,R[11],E,E,20,[[["self"]],[R[23]]]],[11,R[21],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"],[T]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[7],E,E,21,[[[U]],[R[2]]]],[11,R[8],E,E,21,[[],[R[2]]]],[11,R[9],E,E,21,[[["self"]],[T]]],[11,R[10],E,E,21,[[["self"]],[T]]],[11,R[11],E,E,21,[[["self"]],[R[23]]]],[11,R[21],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"],[T]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[7],E,E,22,[[[U]],[R[2]]]],[11,R[8],E,E,22,[[],[R[2]]]],[11,R[9],E,E,22,[[["self"]],[T]]],[11,R[10],E,E,22,[[["self"]],[T]]],[11,R[11],E,E,22,[[["self"]],[R[23]]]],[11,R[21],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"],[T]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[173],E,E,23,[[["self"]],[R[1]]]],[11,R[7],E,E,23,[[[U]],[R[2]]]],[11,R[8],E,E,23,[[],[R[2]]]],[11,R[9],E,E,23,[[["self"]],[T]]],[11,R[10],E,E,23,[[["self"]],[T]]],[11,R[11],E,E,23,[[["self"]],[R[23]]]],[11,R[21],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"],[T]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[173],E,E,24,[[["self"]],[R[1]]]],[11,R[7],E,E,24,[[[U]],[R[2]]]],[11,R[8],E,E,24,[[],[R[2]]]],[11,R[9],E,E,24,[[["self"]],[T]]],[11,R[10],E,E,24,[[["self"]],[T]]],[11,R[11],E,E,24,[[["self"]],[R[23]]]],[11,R[21],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"],[T]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[7],E,E,25,[[[U]],[R[2]]]],[11,R[8],E,E,25,[[],[R[2]]]],[11,R[9],E,E,25,[[["self"]],[T]]],[11,R[10],E,E,25,[[["self"]],[T]]],[11,R[11],E,E,25,[[["self"]],[R[23]]]],[11,R[21],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"],[T]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[7],E,E,26,[[[U]],[R[2]]]],[11,R[8],E,E,26,[[],[R[2]]]],[11,R[9],E,E,26,[[["self"]],[T]]],[11,R[10],E,E,26,[[["self"]],[T]]],[11,R[11],E,E,26,[[["self"]],[R[23]]]],[11,R[21],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"],[T]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[7],E,E,27,[[[U]],[R[2]]]],[11,R[8],E,E,27,[[],[R[2]]]],[11,R[9],E,E,27,[[["self"]],[T]]],[11,R[10],E,E,27,[[["self"]],[T]]],[11,R[11],E,E,27,[[["self"]],[R[23]]]],[11,R[21],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"],[T]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[7],E,E,28,[[[U]],[R[2]]]],[11,R[8],E,E,28,[[],[R[2]]]],[11,R[9],E,E,28,[[["self"]],[T]]],[11,R[10],E,E,28,[[["self"]],[T]]],[11,R[11],E,E,28,[[["self"]],[R[23]]]],[11,R[21],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"],[T]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[7],E,E,29,[[[U]],[R[2]]]],[11,R[8],E,E,29,[[],[R[2]]]],[11,R[9],E,E,29,[[["self"]],[T]]],[11,R[10],E,E,29,[[["self"]],[T]]],[11,R[11],E,E,29,[[["self"]],[R[23]]]],[11,R[21],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"],[T]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[7],E,E,30,[[[U]],[R[2]]]],[11,R[8],E,E,30,[[],[R[2]]]],[11,R[9],E,E,30,[[["self"]],[T]]],[11,R[10],E,E,30,[[["self"]],[T]]],[11,R[11],E,E,30,[[["self"]],[R[23]]]],[11,R[21],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"],[T]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[7],E,E,31,[[[U]],[R[2]]]],[11,R[8],E,E,31,[[],[R[2]]]],[11,R[9],E,E,31,[[["self"]],[T]]],[11,R[10],E,E,31,[[["self"]],[T]]],[11,R[11],E,E,31,[[["self"]],[R[23]]]],[11,R[21],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"],[T]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[7],E,E,32,[[[U]],[R[2]]]],[11,R[8],E,E,32,[[],[R[2]]]],[11,R[9],E,E,32,[[["self"]],[T]]],[11,R[10],E,E,32,[[["self"]],[T]]],[11,R[11],E,E,32,[[["self"]],[R[23]]]],[11,R[21],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"],[T]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[7],E,E,33,[[[U]],[R[2]]]],[11,R[8],E,E,33,[[],[R[2]]]],[11,R[9],E,E,33,[[["self"]],[T]]],[11,R[10],E,E,33,[[["self"]],[T]]],[11,R[11],E,E,33,[[["self"]],[R[23]]]],[11,R[21],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"],[T]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[7],E,E,34,[[[U]],[R[2]]]],[11,R[8],E,E,34,[[],[R[2]]]],[11,R[9],E,E,34,[[["self"]],[T]]],[11,R[10],E,E,34,[[["self"]],[T]]],[11,R[11],E,E,34,[[["self"]],[R[23]]]],[11,R[21],E,E,35,[[["self"]],[T]]],[11,R[22],E,E,35,[[["self"],[T]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[7],E,E,35,[[[U]],[R[2]]]],[11,R[8],E,E,35,[[],[R[2]]]],[11,R[9],E,E,35,[[["self"]],[T]]],[11,R[10],E,E,35,[[["self"]],[T]]],[11,R[11],E,E,35,[[["self"]],[R[23]]]],[11,R[21],E,E,36,[[["self"]],[T]]],[11,R[22],E,E,36,[[["self"],[T]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[7],E,E,36,[[[U]],[R[2]]]],[11,R[8],E,E,36,[[],[R[2]]]],[11,R[9],E,E,36,[[["self"]],[T]]],[11,R[10],E,E,36,[[["self"]],[T]]],[11,R[11],E,E,36,[[["self"]],[R[23]]]],[11,R[21],E,E,37,[[["self"]],[T]]],[11,R[22],E,E,37,[[["self"],[T]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[7],E,E,37,[[[U]],[R[2]]]],[11,R[8],E,E,37,[[],[R[2]]]],[11,R[9],E,E,37,[[["self"]],[T]]],[11,R[10],E,E,37,[[["self"]],[T]]],[11,R[11],E,E,37,[[["self"]],[R[23]]]],[11,R[21],E,E,38,[[["self"]],[T]]],[11,R[22],E,E,38,[[["self"],[T]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[7],E,E,38,[[[U]],[R[2]]]],[11,R[8],E,E,38,[[],[R[2]]]],[11,R[9],E,E,38,[[["self"]],[T]]],[11,R[10],E,E,38,[[["self"]],[T]]],[11,R[11],E,E,38,[[["self"]],[R[23]]]],[11,R[21],E,E,39,[[["self"]],[T]]],[11,R[22],E,E,39,[[["self"],[T]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[7],E,E,39,[[[U]],[R[2]]]],[11,R[8],E,E,39,[[],[R[2]]]],[11,R[9],E,E,39,[[["self"]],[T]]],[11,R[10],E,E,39,[[["self"]],[T]]],[11,R[11],E,E,39,[[["self"]],[R[23]]]],[11,R[21],E,E,40,[[["self"]],[T]]],[11,R[22],E,E,40,[[["self"],[T]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[7],E,E,40,[[[U]],[R[2]]]],[11,R[8],E,E,40,[[],[R[2]]]],[11,R[9],E,E,40,[[["self"]],[T]]],[11,R[10],E,E,40,[[["self"]],[T]]],[11,R[11],E,E,40,[[["self"]],[R[23]]]],[11,R[21],E,E,41,[[["self"]],[T]]],[11,R[22],E,E,41,[[["self"],[T]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[7],E,E,41,[[[U]],[R[2]]]],[11,R[8],E,E,41,[[],[R[2]]]],[11,R[9],E,E,41,[[["self"]],[T]]],[11,R[10],E,E,41,[[["self"]],[T]]],[11,R[11],E,E,41,[[["self"]],[R[23]]]],[11,R[21],R[174],E,42,[[["self"]],[T]]],[11,R[22],E,E,42,[[["self"],[T]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[7],E,E,42,[[[U]],[R[2]]]],[11,R[8],E,E,42,[[],[R[2]]]],[11,R[9],E,E,42,[[["self"]],[T]]],[11,R[10],E,E,42,[[["self"]],[T]]],[11,R[11],E,E,42,[[["self"]],[R[23]]]],[11,R[21],E,E,43,[[["self"]],[T]]],[11,R[22],E,E,43,[[["self"],[T]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[7],E,E,43,[[[U]],[R[2]]]],[11,R[8],E,E,43,[[],[R[2]]]],[11,R[9],E,E,43,[[["self"]],[T]]],[11,R[10],E,E,43,[[["self"]],[T]]],[11,R[11],E,E,43,[[["self"]],[R[23]]]],[11,"from",R[175],E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[7],E,E,44,[[[U]],[R[2]]]],[11,R[8],E,E,44,[[],[R[2]]]],[11,R[9],E,E,44,[[["self"]],[T]]],[11,R[10],E,E,44,[[["self"]],[T]]],[11,R[11],E,E,44,[[["self"]],[R[23]]]],[11,R[21],R[113],E,64,[[["self"]],[T]]],[11,R[22],E,E,64,[[["self"],[T]]]],[11,"from",E,E,64,[[[T]],[T]]],[11,"into",E,E,64,[[],[U]]],[11,R[173],E,E,64,[[["self"]],[R[1]]]],[11,R[7],E,E,64,[[[U]],[R[2]]]],[11,R[8],E,E,64,[[],[R[2]]]],[11,R[9],E,E,64,[[["self"]],[T]]],[11,R[10],E,E,64,[[["self"]],[T]]],[11,R[11],E,E,64,[[["self"]],[R[23]]]],[11,R[21],E,E,65,[[["self"]],[T]]],[11,R[22],E,E,65,[[["self"],[T]]]],[11,"from",E,E,65,[[[T]],[T]]],[11,"into",E,E,65,[[],[U]]],[11,R[173],E,E,65,[[["self"]],[R[1]]]],[11,R[7],E,E,65,[[[U]],[R[2]]]],[11,R[8],E,E,65,[[],[R[2]]]],[11,R[9],E,E,65,[[["self"]],[T]]],[11,R[10],E,E,65,[[["self"]],[T]]],[11,R[11],E,E,65,[[["self"]],[R[23]]]],[11,R[21],E,E,66,[[["self"]],[T]]],[11,R[22],E,E,66,[[["self"],[T]]]],[11,"from",E,E,66,[[[T]],[T]]],[11,"into",E,E,66,[[],[U]]],[11,R[7],E,E,66,[[[U]],[R[2]]]],[11,R[8],E,E,66,[[],[R[2]]]],[11,R[9],E,E,66,[[["self"]],[T]]],[11,R[10],E,E,66,[[["self"]],[T]]],[11,R[11],E,E,66,[[["self"]],[R[23]]]],[11,R[63],E,E,75,[[],["i"]]],[11,"from",E,E,75,[[[T]],[T]]],[11,"into",E,E,75,[[],[U]]],[11,R[7],E,E,75,[[[U]],[R[2]]]],[11,R[8],E,E,75,[[],[R[2]]]],[11,R[9],E,E,75,[[["self"]],[T]]],[11,R[10],E,E,75,[[["self"]],[T]]],[11,R[11],E,E,75,[[["self"]],[R[23]]]],[11,R[21],E,E,67,[[["self"]],[T]]],[11,R[22],E,E,67,[[["self"],[T]]]],[11,"from",E,E,67,[[[T]],[T]]],[11,"into",E,E,67,[[],[U]]],[11,R[7],E,E,67,[[[U]],[R[2]]]],[11,R[8],E,E,67,[[],[R[2]]]],[11,R[9],E,E,67,[[["self"]],[T]]],[11,R[10],E,E,67,[[["self"]],[T]]],[11,R[11],E,E,67,[[["self"]],[R[23]]]],[11,R[21],E,E,68,[[["self"]],[T]]],[11,R[22],E,E,68,[[["self"],[T]]]],[11,"from",E,E,68,[[[T]],[T]]],[11,"into",E,E,68,[[],[U]]],[11,R[7],E,E,68,[[[U]],[R[2]]]],[11,R[8],E,E,68,[[],[R[2]]]],[11,R[9],E,E,68,[[["self"]],[T]]],[11,R[10],E,E,68,[[["self"]],[T]]],[11,R[11],E,E,68,[[["self"]],[R[23]]]],[11,R[63],E,E,76,[[],["i"]]],[11,"from",E,E,76,[[[T]],[T]]],[11,"into",E,E,76,[[],[U]]],[11,R[7],E,E,76,[[[U]],[R[2]]]],[11,R[8],E,E,76,[[],[R[2]]]],[11,R[9],E,E,76,[[["self"]],[T]]],[11,R[10],E,E,76,[[["self"]],[T]]],[11,R[11],E,E,76,[[["self"]],[R[23]]]],[11,R[21],E,E,69,[[["self"]],[T]]],[11,R[22],E,E,69,[[["self"],[T]]]],[11,"from",E,E,69,[[[T]],[T]]],[11,"into",E,E,69,[[],[U]]],[11,R[7],E,E,69,[[[U]],[R[2]]]],[11,R[8],E,E,69,[[],[R[2]]]],[11,R[9],E,E,69,[[["self"]],[T]]],[11,R[10],E,E,69,[[["self"]],[T]]],[11,R[11],E,E,69,[[["self"]],[R[23]]]],[11,R[21],E,E,47,[[["self"]],[T]]],[11,R[22],E,E,47,[[["self"],[T]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,"into",E,E,47,[[],[U]]],[11,R[7],E,E,47,[[[U]],[R[2]]]],[11,R[8],E,E,47,[[],[R[2]]]],[11,R[9],E,E,47,[[["self"]],[T]]],[11,R[10],E,E,47,[[["self"]],[T]]],[11,R[11],E,E,47,[[["self"]],[R[23]]]],[11,R[21],E,E,48,[[["self"]],[T]]],[11,R[22],E,E,48,[[["self"],[T]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[],[U]]],[11,R[7],E,E,48,[[[U]],[R[2]]]],[11,R[8],E,E,48,[[],[R[2]]]],[11,R[9],E,E,48,[[["self"]],[T]]],[11,R[10],E,E,48,[[["self"]],[T]]],[11,R[11],E,E,48,[[["self"]],[R[23]]]],[11,R[21],E,E,49,[[["self"]],[T]]],[11,R[22],E,E,49,[[["self"],[T]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[],[U]]],[11,R[173],E,E,49,[[["self"]],[R[1]]]],[11,R[7],E,E,49,[[[U]],[R[2]]]],[11,R[8],E,E,49,[[],[R[2]]]],[11,R[9],E,E,49,[[["self"]],[T]]],[11,R[10],E,E,49,[[["self"]],[T]]],[11,R[11],E,E,49,[[["self"]],[R[23]]]],[11,R[21],E,E,50,[[["self"]],[T]]],[11,R[22],E,E,50,[[["self"],[T]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,"into",E,E,50,[[],[U]]],[11,R[7],E,E,50,[[[U]],[R[2]]]],[11,R[8],E,E,50,[[],[R[2]]]],[11,R[9],E,E,50,[[["self"]],[T]]],[11,R[10],E,E,50,[[["self"]],[T]]],[11,R[11],E,E,50,[[["self"]],[R[23]]]],[11,R[21],E,E,51,[[["self"]],[T]]],[11,R[22],E,E,51,[[["self"],[T]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,"into",E,E,51,[[],[U]]],[11,R[7],E,E,51,[[[U]],[R[2]]]],[11,R[8],E,E,51,[[],[R[2]]]],[11,R[9],E,E,51,[[["self"]],[T]]],[11,R[10],E,E,51,[[["self"]],[T]]],[11,R[11],E,E,51,[[["self"]],[R[23]]]],[11,R[21],E,E,52,[[["self"]],[T]]],[11,R[22],E,E,52,[[["self"],[T]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,"into",E,E,52,[[],[U]]],[11,R[7],E,E,52,[[[U]],[R[2]]]],[11,R[8],E,E,52,[[],[R[2]]]],[11,R[9],E,E,52,[[["self"]],[T]]],[11,R[10],E,E,52,[[["self"]],[T]]],[11,R[11],E,E,52,[[["self"]],[R[23]]]],[11,R[21],E,E,53,[[["self"]],[T]]],[11,R[22],E,E,53,[[["self"],[T]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,"into",E,E,53,[[],[U]]],[11,R[7],E,E,53,[[[U]],[R[2]]]],[11,R[8],E,E,53,[[],[R[2]]]],[11,R[9],E,E,53,[[["self"]],[T]]],[11,R[10],E,E,53,[[["self"]],[T]]],[11,R[11],E,E,53,[[["self"]],[R[23]]]],[11,R[21],E,E,54,[[["self"]],[T]]],[11,R[22],E,E,54,[[["self"],[T]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,"into",E,E,54,[[],[U]]],[11,R[7],E,E,54,[[[U]],[R[2]]]],[11,R[8],E,E,54,[[],[R[2]]]],[11,R[9],E,E,54,[[["self"]],[T]]],[11,R[10],E,E,54,[[["self"]],[T]]],[11,R[11],E,E,54,[[["self"]],[R[23]]]],[11,R[21],E,E,55,[[["self"]],[T]]],[11,R[22],E,E,55,[[["self"],[T]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,"into",E,E,55,[[],[U]]],[11,R[7],E,E,55,[[[U]],[R[2]]]],[11,R[8],E,E,55,[[],[R[2]]]],[11,R[9],E,E,55,[[["self"]],[T]]],[11,R[10],E,E,55,[[["self"]],[T]]],[11,R[11],E,E,55,[[["self"]],[R[23]]]],[11,R[21],E,E,56,[[["self"]],[T]]],[11,R[22],E,E,56,[[["self"],[T]]]],[11,"from",E,E,56,[[[T]],[T]]],[11,"into",E,E,56,[[],[U]]],[11,R[7],E,E,56,[[[U]],[R[2]]]],[11,R[8],E,E,56,[[],[R[2]]]],[11,R[9],E,E,56,[[["self"]],[T]]],[11,R[10],E,E,56,[[["self"]],[T]]],[11,R[11],E,E,56,[[["self"]],[R[23]]]],[11,R[21],E,E,57,[[["self"]],[T]]],[11,R[22],E,E,57,[[["self"],[T]]]],[11,"from",E,E,57,[[[T]],[T]]],[11,"into",E,E,57,[[],[U]]],[11,R[7],E,E,57,[[[U]],[R[2]]]],[11,R[8],E,E,57,[[],[R[2]]]],[11,R[9],E,E,57,[[["self"]],[T]]],[11,R[10],E,E,57,[[["self"]],[T]]],[11,R[11],E,E,57,[[["self"]],[R[23]]]],[11,R[21],R[176],E,58,[[["self"]],[T]]],[11,R[22],E,E,58,[[["self"],[T]]]],[11,"from",E,E,58,[[[T]],[T]]],[11,"into",E,E,58,[[],[U]]],[11,R[7],E,E,58,[[[U]],[R[2]]]],[11,R[8],E,E,58,[[],[R[2]]]],[11,R[9],E,E,58,[[["self"]],[T]]],[11,R[10],E,E,58,[[["self"]],[T]]],[11,R[11],E,E,58,[[["self"]],[R[23]]]],[11,R[21],E,E,59,[[["self"]],[T]]],[11,R[22],E,E,59,[[["self"],[T]]]],[11,"from",E,E,59,[[[T]],[T]]],[11,"into",E,E,59,[[],[U]]],[11,R[7],E,E,59,[[[U]],[R[2]]]],[11,R[8],E,E,59,[[],[R[2]]]],[11,R[9],E,E,59,[[["self"]],[T]]],[11,R[10],E,E,59,[[["self"]],[T]]],[11,R[11],E,E,59,[[["self"]],[R[23]]]],[11,"from",R[177],E,60,[[[T]],[T]]],[11,"into",E,E,60,[[],[U]]],[11,R[7],E,E,60,[[[U]],[R[2]]]],[11,R[8],E,E,60,[[],[R[2]]]],[11,R[9],E,E,60,[[["self"]],[T]]],[11,R[10],E,E,60,[[["self"]],[T]]],[11,R[11],E,E,60,[[["self"]],[R[23]]]],[11,R[21],R[178],E,61,[[["self"]],[T]]],[11,R[22],E,E,61,[[["self"],[T]]]],[11,"from",E,E,61,[[[T]],[T]]],[11,"into",E,E,61,[[],[U]]],[11,R[7],E,E,61,[[[U]],[R[2]]]],[11,R[8],E,E,61,[[],[R[2]]]],[11,R[9],E,E,61,[[["self"]],[T]]],[11,R[10],E,E,61,[[["self"]],[T]]],[11,R[11],E,E,61,[[["self"]],[R[23]]]],[11,R[21],E,E,62,[[["self"]],[T]]],[11,R[22],E,E,62,[[["self"],[T]]]],[11,"from",E,E,62,[[[T]],[T]]],[11,"into",E,E,62,[[],[U]]],[11,R[7],E,E,62,[[[U]],[R[2]]]],[11,R[8],E,E,62,[[],[R[2]]]],[11,R[9],E,E,62,[[["self"]],[T]]],[11,R[10],E,E,62,[[["self"]],[T]]],[11,R[11],E,E,62,[[["self"]],[R[23]]]],[11,R[21],R[179],E,72,[[["self"]],[T]]],[11,R[22],E,E,72,[[["self"],[T]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,"into",E,E,72,[[],[U]]],[11,R[7],E,E,72,[[[U]],[R[2]]]],[11,R[8],E,E,72,[[],[R[2]]]],[11,R[9],E,E,72,[[["self"]],[T]]],[11,R[10],E,E,72,[[["self"]],[T]]],[11,R[11],E,E,72,[[["self"]],[R[23]]]],[11,R[63],E,E,74,[[],["i"]]],[11,"from",E,E,74,[[[T]],[T]]],[11,"into",E,E,74,[[],[U]]],[11,R[7],E,E,74,[[[U]],[R[2]]]],[11,R[8],E,E,74,[[],[R[2]]]],[11,R[9],E,E,74,[[["self"]],[T]]],[11,R[10],E,E,74,[[["self"]],[T]]],[11,R[11],E,E,74,[[["self"]],[R[23]]]],[11,R[21],E,E,73,[[["self"]],[T]]],[11,R[22],E,E,73,[[["self"],[T]]]],[11,"from",E,E,73,[[[T]],[T]]],[11,"into",E,E,73,[[],[U]]],[11,R[7],E,E,73,[[[U]],[R[2]]]],[11,R[8],E,E,73,[[],[R[2]]]],[11,R[9],E,E,73,[[["self"]],[T]]],[11,R[10],E,E,73,[[["self"]],[T]]],[11,R[11],E,E,73,[[["self"]],[R[23]]]],[11,"drop",R[78],E,24,[[["self"]]]],[11,"drop",E,E,33,[[["self"]]]],[11,"drop",R[113],E,65,[[["self"]]]],[11,"as_ref",R[176],E,59,[[["self"]]]],[11,R[45],R[174],E,42,[[],[R[97]]]],[11,R[45],R[178],E,61,[[],[R[125]]]],[11,R[45],R[113],E,67,[[],[R[143]]]],[11,R[45],E,E,69,[[],[R[154]]]],[11,R[45],R[103],E,70,[[],[R[97]]]],[11,"clone",R[174],E,42,[[["self"]],[R[97]]]],[11,"clone",E,E,43,[[["self"]],["parser"]]],[11,"clone",R[78],E,46,[[["self"]],["error"]]],[11,"clone",E,E,23,[[["self"]],[R[133]]]],[11,"clone",E,E,1,[[["self"]],["span"]]],[11,"clone",E,E,2,[[["self"]],[R[101]]]],[11,"clone",E,E,3,[[["self"]],[R[98]]]],[11,"clone",E,E,4,[[["self"]],["comment"]]],[11,"clone",E,E,24,[[["self"]],["ast"]]],[11,"clone",E,E,5,[[["self"]],[R[180]]]],[11,"clone",E,E,6,[[["self"]],["concat"]]],[11,"clone",E,E,7,[[["self"]],[R[136]]]],[11,"clone",E,E,25,[[["self"]],[R[188]]]],[11,"clone",E,E,26,[[["self"]],[R[189]]]],[11,"clone",E,E,27,[[["self"]],[R[190]]]],[11,"clone",E,E,28,[[["self"]],["class"]]],[11,"clone",E,E,8,[[["self"]],[R[191]]]],[11,"clone",E,E,29,[[["self"]],[R[192]]]],[11,"clone",E,E,9,[[["self"]],[R[193]]]],[11,"clone",E,E,30,[[["self"]],[R[102]]]],[11,"clone",E,E,10,[[["self"]],[R[141]]]],[11,"clone",E,E,31,[[["self"]],[R[194]]]],[11,"clone",E,E,32,[[["self"]],[R[195]]]],[11,"clone",E,E,11,[[["self"]],[R[196]]]],[11,"clone",E,E,33,[[["self"]],[R[197]]]],[11,"clone",E,E,34,[[["self"]],[R[99]]]],[11,"clone",E,E,12,[[["self"]],[R[198]]]],[11,"clone",E,E,13,[[["self"]],[R[181]]]],[11,"clone",E,E,14,[[["self"]],[R[100]]]],[11,"clone",E,E,35,[[["self"]],[R[199]]]],[11,"clone",E,E,15,[[["self"]],[R[200]]]],[11,"clone",E,E,36,[[["self"]],[R[201]]]],[11,"clone",E,E,16,[[["self"]],[R[137]]]],[11,"clone",E,E,17,[[["self"]],[R[202]]]],[11,"clone",E,E,37,[[["self"]],[R[185]]]],[11,"clone",E,E,38,[[["self"]],[R[186]]]],[11,"clone",E,E,18,[[["self"]],["group"]]],[11,"clone",E,E,39,[[["self"]],[R[184]]]],[11,"clone",E,E,19,[[["self"]],[R[203]]]],[11,"clone",E,E,20,[[["self"]],[R[204]]]],[11,"clone",E,E,21,[[["self"]],["flags"]]],[11,"clone",E,E,22,[[["self"]],[R[182]]]],[11,"clone",E,E,40,[[["self"]],[R[205]]]],[11,"clone",E,E,41,[[["self"]],["flag"]]],[11,"clone",R[103],E,0,[[["self"]],["error"]]],[11,"clone",R[176],E,58,[[["self"]],[R[121]]]],[11,"clone",E,E,59,[[["self"]],[R[136]]]],[11,"clone",R[178],E,61,[[["self"]],[R[125]]]],[11,"clone",E,E,62,[[["self"]],[R[126]]]],[11,"clone",R[113],E,64,[[["self"]],["error"]]],[11,"clone",E,E,49,[[["self"]],[R[133]]]],[11,"clone",E,E,65,[[["self"]],["hir"]]],[11,"clone",E,E,50,[[["self"]],["hirkind"]]],[11,"clone",E,E,51,[[["self"]],[R[136]]]],[11,"clone",E,E,52,[[["self"]],["class"]]],[11,"clone",E,E,66,[[["self"]],[R[141]]]],[11,"clone",E,E,67,[[["self"]],[R[143]]]],[11,"clone",E,E,68,[[["self"]],[R[145]]]],[11,"clone",E,E,69,[[["self"]],[R[154]]]],[11,"clone",E,E,53,[[["self"]],["anchor"]]],[11,"clone",E,E,54,[[["self"]],[R[183]]]],[11,"clone",E,E,47,[[["self"]],["group"]]],[11,"clone",E,E,55,[[["self"]],[R[184]]]],[11,"clone",E,E,48,[[["self"]],[R[137]]]],[11,"clone",E,E,56,[[["self"]],[R[185]]]],[11,"clone",E,E,57,[[["self"]],[R[186]]]],[11,"clone",R[103],E,70,[[["self"]],[R[97]]]],[11,"clone",E,E,71,[[["self"]],["parser"]]],[11,"clone",R[179],E,73,[[["self"]],[R[206]]]],[11,"clone",E,E,72,[[["self"]],[R[207]]]],[11,R[187],R[78],E,1,[[["self"],["span"]],[[R[65]],[R[67],[R[65]]]]]],[11,R[187],E,E,2,[[["self"],[R[101]]],[[R[65]],[R[67],[R[65]]]]]],[11,R[187],R[176],E,59,[[["self"],[R[136]]],[[R[65]],[R[67],[R[65]]]]]],[11,R[187],R[113],E,67,[[["self"],[R[143]]],[[R[67],[R[65]]],[R[65]]]]],[11,"lt",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,"le",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,"gt",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,"ge",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,R[187],E,E,69,[[["self"],[R[154]]],[[R[67],[R[65]]],[R[65]]]]],[11,"lt",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"le",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"gt",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"ge",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"eq",R[78],E,46,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,46,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,23,[[["self"],[R[133]]],["bool"]]],[11,"ne",E,E,23,[[["self"],[R[133]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["span"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["span"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[101]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[101]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[98]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[98]]],["bool"]]],[11,"eq",E,E,4,[[["self"],["comment"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["comment"]],["bool"]]],[11,"eq",E,E,24,[[["self"],["ast"]],["bool"]]],[11,"ne",E,E,24,[[["self"],["ast"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[180]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[180]]],["bool"]]],[11,"eq",E,E,6,[[["self"],["concat"]],["bool"]]],[11,"ne",E,E,6,[[["self"],["concat"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[136]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[136]]],["bool"]]],[11,"eq",E,E,25,[[["self"],[R[188]]],["bool"]]],[11,"ne",E,E,25,[[["self"],[R[188]]],["bool"]]],[11,"eq",E,E,26,[[["self"],[R[189]]],["bool"]]],[11,"eq",E,E,27,[[["self"],[R[190]]],["bool"]]],[11,"eq",E,E,28,[[["self"],["class"]],["bool"]]],[11,"ne",E,E,28,[[["self"],["class"]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[191]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[191]]],["bool"]]],[11,"eq",E,E,29,[[["self"],[R[192]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[193]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[193]]],["bool"]]],[11,"eq",E,E,30,[[["self"],[R[102]]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[141]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[141]]],["bool"]]],[11,"eq",E,E,31,[[["self"],[R[194]]],["bool"]]],[11,"ne",E,E,31,[[["self"],[R[194]]],["bool"]]],[11,"eq",E,E,32,[[["self"],[R[195]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[196]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[196]]],["bool"]]],[11,"eq",E,E,33,[[["self"],[R[197]]],["bool"]]],[11,"ne",E,E,33,[[["self"],[R[197]]],["bool"]]],[11,"eq",E,E,34,[[["self"],[R[99]]],["bool"]]],[11,"ne",E,E,34,[[["self"],[R[99]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[198]]],["bool"]]],[11,"ne",E,E,12,[[["self"],[R[198]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[181]]],["bool"]]],[11,"ne",E,E,13,[[["self"],[R[181]]],["bool"]]],[11,"eq",E,E,14,[[["self"],[R[100]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[100]]],["bool"]]],[11,"eq",E,E,35,[[["self"],[R[199]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[200]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[200]]],["bool"]]],[11,"eq",E,E,36,[[["self"],[R[201]]],["bool"]]],[11,"eq",E,E,16,[[["self"],[R[137]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[137]]],["bool"]]],[11,"eq",E,E,17,[[["self"],[R[202]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[202]]],["bool"]]],[11,"eq",E,E,37,[[["self"],[R[185]]],["bool"]]],[11,"ne",E,E,37,[[["self"],[R[185]]],["bool"]]],[11,"eq",E,E,38,[[["self"],[R[186]]],["bool"]]],[11,"ne",E,E,38,[[["self"],[R[186]]],["bool"]]],[11,"eq",E,E,18,[[["self"],["group"]],["bool"]]],[11,"ne",E,E,18,[[["self"],["group"]],["bool"]]],[11,"eq",E,E,39,[[["self"],[R[184]]],["bool"]]],[11,"ne",E,E,39,[[["self"],[R[184]]],["bool"]]],[11,"eq",E,E,19,[[["self"],[R[203]]],["bool"]]],[11,"ne",E,E,19,[[["self"],[R[203]]],["bool"]]],[11,"eq",E,E,20,[[["self"],[R[204]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[204]]],["bool"]]],[11,"eq",E,E,21,[[["self"],["flags"]],["bool"]]],[11,"ne",E,E,21,[[["self"],["flags"]],["bool"]]],[11,"eq",E,E,22,[[["self"],[R[182]]],["bool"]]],[11,"ne",E,E,22,[[["self"],[R[182]]],["bool"]]],[11,"eq",E,E,40,[[["self"],[R[205]]],["bool"]]],[11,"ne",E,E,40,[[["self"],[R[205]]],["bool"]]],[11,"eq",E,E,41,[[["self"],["flag"]],["bool"]]],[11,"eq",R[103],E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"eq",R[176],E,58,[[["self"],[R[121]]],["bool"]]],[11,"ne",E,E,58,[[["self"],[R[121]]],["bool"]]],[11,"eq",E,E,59,[[["self"],[R[136]]],["bool"]]],[11,"eq",R[113],E,64,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,64,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,49,[[["self"],[R[133]]],["bool"]]],[11,"eq",E,E,65,[[["self"],["hir"]],["bool"]]],[11,"ne",E,E,65,[[["self"],["hir"]],["bool"]]],[11,"eq",E,E,50,[[["self"],["hirkind"]],["bool"]]],[11,"ne",E,E,50,[[["self"],["hirkind"]],["bool"]]],[11,"eq",E,E,51,[[["self"],[R[136]]],["bool"]]],[11,"ne",E,E,51,[[["self"],[R[136]]],["bool"]]],[11,"eq",E,E,52,[[["self"],["class"]],["bool"]]],[11,"ne",E,E,52,[[["self"],["class"]],["bool"]]],[11,"eq",E,E,66,[[["self"],[R[141]]],["bool"]]],[11,"ne",E,E,66,[[["self"],[R[141]]],["bool"]]],[11,"eq",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,"ne",E,E,67,[[["self"],[R[143]]],["bool"]]],[11,"eq",E,E,68,[[["self"],[R[145]]],["bool"]]],[11,"ne",E,E,68,[[["self"],[R[145]]],["bool"]]],[11,"eq",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"ne",E,E,69,[[["self"],[R[154]]],["bool"]]],[11,"eq",E,E,53,[[["self"],["anchor"]],["bool"]]],[11,"eq",E,E,54,[[["self"],[R[183]]],["bool"]]],[11,"eq",E,E,47,[[["self"],["group"]],["bool"]]],[11,"ne",E,E,47,[[["self"],["group"]],["bool"]]],[11,"eq",E,E,55,[[["self"],[R[184]]],["bool"]]],[11,"ne",E,E,55,[[["self"],[R[184]]],["bool"]]],[11,"eq",E,E,48,[[["self"],[R[137]]],["bool"]]],[11,"ne",E,E,48,[[["self"],[R[137]]],["bool"]]],[11,"eq",E,E,56,[[["self"],[R[185]]],["bool"]]],[11,"ne",E,E,56,[[["self"],[R[185]]],["bool"]]],[11,"eq",E,E,57,[[["self"],[R[186]]],["bool"]]],[11,"ne",E,E,57,[[["self"],[R[186]]],["bool"]]],[11,"eq",R[179],E,73,[[["self"],[R[206]]],["bool"]]],[11,"ne",E,E,73,[[["self"],[R[206]]],["bool"]]],[11,"eq",E,E,72,[[["self"],[R[207]]],["bool"]]],[11,"ne",E,E,72,[[["self"],[R[207]]],["bool"]]],[11,"from",R[103],E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"next",R[113],E,75,[[["self"]],[[R[143]],[R[67],[R[143]]]]]],[11,"next",E,E,76,[[["self"]],[[R[154]],[R[67],[R[154]]]]]],[11,"next",R[179],E,74,[[["self"]],[R[67]]]],[11,"cmp",R[78],E,1,[[["self"],["span"]],[R[65]]]],[11,"cmp",E,E,2,[[["self"],[R[101]]],[R[65]]]],[11,"cmp",R[176],E,59,[[["self"],[R[136]]],[R[65]]]],[11,"cmp",R[113],E,67,[[["self"],[R[143]]],[R[65]]]],[11,"cmp",E,E,69,[[["self"],[R[154]]],[R[65]]]],[11,"deref",R[176],E,59,[[["self"]],["vec"]]],[11,R[30],E,E,59,[[["self"]],["vec"]]],[11,"fmt",R[78],E,46,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,23,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,24,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[103],E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[113],E,64,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,49,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,65,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[174],E,42,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,43,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[175],E,44,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[78],E,46,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,23,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,24,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,25,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,26,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,27,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,28,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,29,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,9,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,30,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,10,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,31,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,32,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,33,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,34,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,12,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,13,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,14,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,35,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,15,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,36,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,16,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,17,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,37,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,38,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,18,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,39,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,19,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,20,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,21,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,22,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,40,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,41,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[103],E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[176],E,58,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,59,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[177],E,60,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[178],E,61,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,62,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[113],E,64,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,49,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,65,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,50,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,51,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,52,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,66,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,75,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,67,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,68,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,76,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,69,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,53,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,54,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,47,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,55,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,48,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,56,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,57,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[103],E,70,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,71,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",R[179],E,73,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,72,[[["self"],[R[12]]],[R[2]]]],[11,R[208],R[78],E,46,[[["self"]],["str"]]],[11,R[208],R[103],E,0,[[["self"]],["str"]]],[11,R[208],R[113],E,64,[[["self"]],["str"]]],[11,"start",R[78],R[209],45,[[["self"]]]],[11,R[129],E,R[210],45,[[["self"],["ast"]],[R[2]]]],[11,R[130],E,R[211],45,[[["self"],["ast"]],[R[2]]]],[11,R[131],E,R[212],45,[[["self"]],[R[2]]]],[11,R[213],E,R[214],45,[[["self"],[R[99]]],[R[2]]]],[11,R[215],E,R[216],45,[[["self"],[R[99]]],[R[2]]]],[11,R[217],E,R[218],45,[[["self"],[R[100]]],[R[2]]]],[11,R[219],E,R[220],45,[[["self"],[R[100]]],[R[2]]]],[11,R[221],E,R[222],45,[[["self"],[R[100]]],[R[2]]]],[11,"start",R[113],R[223],63,[[["self"]]]],[11,R[129],E,R[224],63,[[["self"],["hir"]],[R[2]]]],[11,R[130],E,R[225],63,[[["self"],["hir"]],[R[2]]]],[11,R[131],E,R[226],63,[[["self"]],[R[2]]]]],"p":[[4,"Error"],[3,"Span"],[3,"Position"],[3,R[227]],[3,"Comment"],[3,R[85]],[3,"Concat"],[3,R[88]],[3,R[228]],[3,R[229]],[3,R[104]],[3,R[230]],[3,R[231]],[3,R[232]],[3,R[233]],[3,R[81]],[3,R[83]],[3,R[234]],[3,"Group"],[3,R[93]],[3,"SetFlags"],[3,"Flags"],[3,R[235]],[4,R[105]],[4,"Ast"],[4,R[236]],[4,R[237]],[4,R[238]],[4,"Class"],[4,R[239]],[4,R[240]],[4,R[241]],[4,R[242]],[4,"ClassSet"],[4,R[243]],[4,R[244]],[4,R[245]],[4,R[114]],[4,R[119]],[4,R[110]],[4,R[246]],[4,"Flag"],[3,R[95]],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,R[83]],[4,R[105]],[4,"HirKind"],[4,R[88]],[4,"Class"],[4,"Anchor"],[4,R[106]],[4,R[110]],[4,R[114]],[4,R[119]],[3,"Literals"],[3,R[88]],[3,"Printer"],[3,R[247]],[3,R[248]],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,R[104]],[3,R[249]],[3,R[250]],[3,R[251]],[3,R[95]],[3,"Parser"],[3,R[252]],[4,R[253]],[3,R[254]],[3,R[255]],[3,R[256]]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","i":[[3,R[35],"rustc_demangle","Representation of a demangled symbol name.",N,N],[3,R[36],E,"Error returned from the `try_demangle` function below when…",N,N],[5,R[33],E,"De-mangles a Rust symbol into a more readable version",N,[[["str"]],[R[33]]]],[5,"try_demangle",E,"The same as `demangle`, except return an `Err` if the…",N,[[["str"]],[[R[2],[R[33],R[34]]],[R[33]],[R[34]]]]],[11,"as_str",E,"Returns the underlying string that's being demangled.",0,[[["self"]],["str"]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"clone",E,E,1,[[["self"]],[R[34]]]]],"p":[[3,R[35]],[3,R[36]]]};
searchIndex["safe_transmute"]={"doc":"This crate contains checked implementations of…","i":[[5,"transmute_many_permissive_mut",R[331],R[322],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_many_pedantic_mut",E,R[322],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,R[328],E,R[322],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_many_pedantic",E,R[322],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_one_pedantic",E,R[323],N,[[],[[R[324]],["error",["u8"]],[R[2],["error"]]]]],[5,R[326],E,R[322],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,R[327],E,"Transmute a mutable byte slice into a mutable sequence of…",N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_one",E,R[323],N,[[],[[R[324]],["error",["u8"]],[R[2],["error"]]]]],[5,R[330],E,"Transform a vector into a vector of values with the given…",N,[[["vec"],[R[324]]],[[R[2],["vec","error"]],["vec"],["error"]]]],[0,"base",E,"Primitives for object and array transmutation.",N,N],[5,"from_bytes","safe_transmute::base",R[325],N,[[],[["error",["u8"]],["copy"],[R[2],["error"]]]]],[5,"from_bytes_pedantic",E,R[325],N,[[],[["error",["u8"]],["copy"],[R[2],["error"]]]]],[5,R[326],E,R[329],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,R[327],E,"View a mutable byte slice as a slice of an arbitrary type.",N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,R[328],E,R[329],N,[[]]],[5,R[330],E,R[340],N,[[["vec"]],["vec"]]],[0,"bool",R[331],"Functions for safe transmutation to `bool`.",N,N],[5,"bytes_are_bool","safe_transmute::bool","Makes sure that the bytes represent a sequence of valid…",N,[[],["bool"]]],[5,"transmute_bool_permissive",E,R[332],N,[[],[["error",["u8","bool"]],[R[2],["error"]]]]],[5,"transmute_bool_pedantic",E,R[332],N,[[],[["error",["u8","bool"]],[R[2],["error"]]]]],[5,"transmute_bool_vec_permissive",E,"Trasform a byte vector into a vector of bool.",N,[[["vec",["u8"]],["u8"]],[[R[2],["vec","error"]],["error",["u8","bool"]],["vec",["bool"]]]]],[5,"transmute_bool_vec_pedantic",E,"Transform a byte vector into a vector of bool.",N,[[["vec",["u8"]],["u8"]],[[R[2],["vec","error"]],["error",["u8","bool"]],["vec",["bool"]]]]],[0,"util",R[331],"Module containing various utility functions.",N,N],[5,"designalise_f32","safe_transmute::util","If the specified 32-bit float is a signaling NaN, make it…",N,[[["f32"]],["f32"]]],[5,"designalise_f64",E,"If the specified 64-bit float is a signaling NaN, make it…",N,[[["f64"]],["f64"]]],[5,"from_bits_f32_designalised",E,"Reinterpret the given bits as a 32-bit float. If the…",N,[[["u32"]],["f32"]]],[5,"from_bits_f64_designalised",E,"Reinterpret the given bits as a 64-bit float. If the…",N,[[["u64"]],["f64"]]],[0,"align",R[331],"Alignment checking primitives.",N,N],[5,"check_alignment","safe_transmute::align","Check whether the given data slice of `S`s is properly…",N,[[],[[R[333]],[R[2],[R[333]]]]]],[5,"check_alignment_mut",E,"Check whether the given mutable data slice of `S`s is…",N,[[],[[R[333]],[R[2],[R[333]]]]]],[0,"error",R[331],"Detectable and recoverable-from transmutation precondition…",N,N],[3,R[347],R[343],"A slice boundary guard error, usually created by a `Guard`.",N,N],[12,"required",E,"The required amount of bytes for transmutation.",0,N],[12,"actual",E,"The actual amount of bytes.",0,N],[12,"reason",E,"Why this `required`/`actual`/`T` combo is an error.",0,N],[3,R[348],E,"Unaligned memory access error.",N,N],[12,"offset",E,"The required amount of bytes to discard at the front for…",1,N],[12,"source",E,"A slice of the original source data.",1,N],[3,R[349],E,"Incompatible vector transmutation error.",N,N],[12,"vec",E,"The original vector.",2,N],[4,"Error",E,"A transmutation error. This type describes possible errors…",N,N],[13,"Guard",E,"The data does not respect the target type's boundaries.",3,N],[13,"Unaligned",E,"The given data slice is not properly aligned for the…",3,N],[13,"IncompatibleVecTarget",E,"The data vector's element type does not have the same size…",3,N],[13,"InvalidValue",E,"The data contains an invalid value for the target type.",3,N],[4,R[350],E,"How the type's size compares to the received byte count…",N,N],[13,"NotEnoughBytes",E,"Too few bytes to fill even one instance of a type.",4,N],[13,"TooManyBytes",E,"Too many bytes to fill a type.",4,N],[13,"InexactByteCount",E,"The byte amount received is not the same as the type's size.",4,N],[11,"copy",E,"Reattempt the failed transmutation if the failure was…",3,[[],[["vec"],["error"],[R[2],["vec","error"]]]]],[11,R[334],E,"Reattempt the failed non-trivial transmutation if the…",3,[[],[["vec"],["error"],[R[2],["vec","error"]]]]],[11,"without_src",E,"Create a new error which discards runtime information…",3,[[],["error"]]],[11,R[208],E,"Retrieve a human readable description of the reason.",4,[[],["str"]]],[11,"new",E,E,1,[[["usize"]],["self"]]],[11,R[334],E,R[335],1,[[["self"]],["vec"]]],[11,"copy",E,R[335],1,[[["self"]],["vec"]]],[11,"new",E,"Create an error with the given vector.",2,[[["vec"]],["self"]]],[11,R[334],E,R[336],2,[[["self"]],["vec"]]],[11,"copy",E,R[336],2,[[["self"]],["vec"]]],[0,"guard",R[331],"The `guard` module exposes an API for memory boundary…",N,N],[3,R[351],R[344],"Single value guard: The byte slice must have exactly…",N,N],[3,R[352],E,"Pedantic guard: The byte slice must have at least enough…",N,N],[3,R[353],E,"An all-or-nothing guard: The byte slice should not have…",N,N],[3,R[354],E,"A single-or-many guard: The byte slice must have at least…",N,N],[3,R[355],E,"Permissive guard: The resulting slice would have as many…",N,N],[8,"Guard",E,"The trait describes types which define boundary checking…",N,N],[10,"check",E,"Check the size of the given byte slice against a…",5,[[],[[R[337]],[R[2],[R[337]]]]]],[0,"trivial",R[331],"Transmutation of trivial objects",N,N],[5,"align_to","safe_transmute::trivial",R[338],N,[[]]],[5,"align_to_mut",E,R[338],N,[[]]],[5,"transmute_trivial",E,R[323],N,[[],[[R[324]],["error",["u8"]],[R[2],["error"]]]]],[5,"transmute_trivial_pedantic",E,R[323],N,[[],[[R[324]],["error",["u8"]],[R[2],["error"]]]]],[5,"transmute_trivial_many",E,R[323],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_trivial_many_mut",E,R[323],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"guarded_transmute_pod_many_permissive",E,R[339],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"guarded_transmute_pod_many_pedantic",E,R[339],N,[[],[[R[2],["error"]],["error",["u8"]]]]],[5,"transmute_trivial_vec",E,R[340],N,[[["vec"],[R[324]]],[["vec"],[R[324]]]]],[8,"TriviallyTransmutable",E,"Type that can be constructed from any combination of bytes.",N,N],[0,"to_bytes",R[331],"Functions for transmutation from a concrete type to bytes.",N,N],[5,"transmute_to_bytes_unchecked","safe_transmute::to_bytes","Transmute a single instance of an arbitrary type into a…",N,[[["s"]]]],[5,"transmute_to_bytes_unchecked_mut",E,"Transmute a single mutable instance of an arbitrary type…",N,[[["s"]]]],[5,"transmute_to_bytes_many_unchecked",E,R[342],N,[[]]],[5,"transmute_to_bytes_many_unchecked_mut",E,"Transmute a mutable slice of arbitrary types into a…",N,[[]]],[5,"transmute_one_to_bytes",E,R[341],N,[[["s"]]]],[5,"transmute_one_to_bytes_mut",E,R[341],N,[[["s"]]]],[5,"transmute_to_bytes",E,R[342],N,[[]]],[5,"transmute_to_bytes_mut",E,"Transmute a mutable slice of a trivially transmutable type…",N,[[]]],[5,"guarded_transmute_to_bytes_pod_many",E,R[342],N,[[]]],[5,"transmute_to_bytes_vec",E,"Transmute a vector of elements of an arbitrary type into a…",N,[[["vec"],[R[324]]],[["error",["u8"]],[R[2],["vec","error"]],["vec",["u8"]]]]],[0,"migration",R[331],"Migration guides.",N,N],[0,"v0_11","safe_transmute::migration","Migrating to `safe-transmute` v0.11",N,N],[14,"try_copy",R[331],"Retrieve the result of a transmutation, copying the data…",N,N],[14,"try_copy_unchecked",E,"Retrieve the result of a non-trivial transmutation,…",N,N],[11,R[21],R[343],E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[173],E,E,0,[[["self"]],[R[1]]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[173],E,E,1,[[["self"]],[R[1]]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[173],E,E,2,[[["self"]],[R[1]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[173],E,E,3,[[["self"]],[R[1]]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,"from",R[344],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[],[R[2]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[23]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[7],E,E,7,[[[U]],[R[2]]]],[11,R[8],E,E,7,[[],[R[2]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[23]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[7],E,E,8,[[[U]],[R[2]]]],[11,R[8],E,E,8,[[],[R[2]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[23]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[7],E,E,9,[[[U]],[R[2]]]],[11,R[8],E,E,9,[[],[R[2]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[23]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[7],E,E,10,[[[U]],[R[2]]]],[11,R[8],E,E,10,[[],[R[2]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[["self"]],[T]]],[11,R[11],E,E,10,[[["self"]],[R[23]]]],[11,"check",E,E,6,[[],[[R[337]],[R[2],[R[337]]]]]],[11,"check",E,E,7,[[],[[R[337]],[R[2],[R[337]]]]]],[11,"check",E,E,8,[[],[[R[337]],[R[2],[R[337]]]]]],[11,"check",E,E,9,[[],[[R[337]],[R[2],[R[337]]]]]],[11,"check",E,E,10,[[],[[R[337]],[R[2],[R[337]]]]]],[11,"clone",R[343],E,3,[[["self"]],["error"]]],[11,"clone",E,E,0,[[["self"]],[R[337]]]],[11,"clone",E,E,4,[[["self"]],[R[345]]]],[11,"clone",E,E,1,[[["self"]],[R[333]]]],[11,"clone",E,E,2,[[["self"]],[R[346]]]],[11,"eq",E,E,3,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,3,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[337]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[337]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[345]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[333]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[333]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[346]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[346]]],["bool"]]],[11,"from",E,E,3,[[[R[337]]],["self"]]],[11,"from",E,E,3,[[[R[333]]],["self"]]],[11,"from",E,E,3,[[[R[346]]],["self"]]],[11,"hash",E,E,3,[[["self"],["__hst"]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__hst"]]]],[11,"hash",E,E,2,[[["self"],["__hst"]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,R[208],E,E,3,[[["self"]],["str"]]],[11,R[208],E,E,0,[[["self"]],["str"]]],[11,R[208],E,E,1,[[["self"]],["str"]]],[11,R[208],E,E,2,[[["self"]],["str"]]]],"p":[[3,R[347]],[3,R[348]],[3,R[349]],[4,"Error"],[4,R[350]],[8,"Guard"],[3,R[351]],[3,R[352]],[3,R[353]],[3,R[354]],[3,R[355]]]};
searchIndex["same_file"]={"doc":"This crate provides a safe and simple cross platform way…","i":[[3,"Handle","same_file","A handle to a file that can be tested for equality with…",N,N],[5,"is_same_file",E,"Returns true if the two file paths may correspond to the…",N,[[["q"],["p"]],[[R[2],["bool"]],["bool"]]]],[11,"from_path",E,"Construct a handle from a path.",0,[[["asref",["path"]],["path"]],[[R[2],["handle"]],["handle"]]]],[11,"from_file",E,"Construct a handle from a file.",0,[[["file"]],[[R[2],["handle"]],["handle"]]]],[11,"stdin",E,"Construct a handle from stdin.",0,[[],[[R[2],["handle"]],["handle"]]]],[11,"stdout",E,"Construct a handle from stdout.",0,[[],[[R[2],["handle"]],["handle"]]]],[11,"stderr",E,"Construct a handle from stderr.",0,[[],[[R[2],["handle"]],["handle"]]]],[11,"as_file",E,"Return a reference to the underlying file.",0,[[["self"]],["file"]]],[11,"as_file_mut",E,"Return a mutable reference to the underlying file.",0,[[["self"]],["file"]]],[11,"dev",E,"Return the underlying device number of this handle.",0,[[["self"]],["u64"]]],[11,"ino",E,"Return the underlying inode number of this handle.",0,[[["self"]],["u64"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,"eq",E,E,0,[[["self"],["handle"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["handle"]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"as_raw_fd",E,E,0,[[["self"]],["rawfd"]]],[11,"into_raw_fd",E,E,0,[[],["rawfd"]]]],"p":[[3,"Handle"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of…","i":[[3,R[32],R[27],"`ScopeGuard` is a scope guard that may own a protected…",N,N],[4,"Always",E,"Always run on scope exit.",N,N],[5,"guard",E,"Create a new `ScopeGuard` owning `v` and with deferred…",N,[[[T],["f"]],[[R[27],["always"]],["always"]]]],[8,R[31],E,"Controls in which cases the associated code should be run",N,N],[10,R[29],E,"Return `true` if the guard’s associated code should run…",0,[[],["bool"]]],[11,"with_strategy",E,"Create a `ScopeGuard` that owns `v` (accessible through…",1,[[[T],["f"]],[R[27]]]],[11,R[28],E,"“Defuse” the guard and extract the value without calling…",1,[[],[T]]],[14,"defer",E,"Macro to create a `ScopeGuard` (always run).",N,N],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[29],E,E,2,[[],["bool"]]],[11,"deref",E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[T]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"drop",E,E,1,[[["self"]]]]],"p":[[8,R[31]],[3,R[32]],[4,"Always"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain…","i":[[3,"Drain",R[60],"An iterator that removes the items from a `SmallVec` and…",N,N],[3,R[73],E,"A `Vec`-like container that can store a small number of…",N,N],[3,R[74],E,"An iterator that consumes a `SmallVec` and yields its…",N,N],[5,"unreachable",E,"Hint to the optimizer that any code path which calls this…",N,[[]]],[8,"VecLike",E,"Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push",E,"Append an element to the vector.",0,[[["self"],[T]]]],[8,R[72],E,"Trait to be implemented by a collection that can be…",N,N],[10,R[62],E,"Extends a collection from a slice of its element type",1,[[["self"]]]],[8,"Array",E,"Types that can be used as the backing store for a SmallVec",N,N],[16,"Item",E,"The type of the array's elements.",2,N],[10,"size",E,"Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr",E,"Returns a pointer to the first element of the array.",2,[[["self"]]]],[10,"ptr_mut",E,"Returns a mutable pointer to the first element of the array.",2,[[["self"]]]],[11,"new",E,"Construct an empty vector",3,[[],[R[60]]]],[11,R[266],E,"Construct an empty vector with enough capacity…",3,[[["usize"]],["self"]]],[11,"from_vec",E,"Construct a new `SmallVec` from a `Vec<A::Item>`.",3,[[["vec"]],[R[60]]]],[11,"from_buf",E,R[61],3,[[["a"]],[R[60]]]],[11,"from_buf_and_len",E,R[61],3,[[["a"],["usize"]],[R[60]]]],[11,"from_buf_and_len_unchecked",E,R[61],3,[[["a"],["usize"]],[R[60]]]],[11,"set_len",E,"Sets the length of a vector.",3,[[["self"],["usize"]]]],[11,"inline_size",E,"The maximum number of elements this vector can hold inline",3,[[["self"]],["usize"]]],[11,"len",E,"The number of elements stored in the vector",3,[[["self"]],["usize"]]],[11,R[122],E,"Returns `true` if the vector is empty",3,[[["self"]],["bool"]]],[11,"capacity",E,"The number of items the vector can hold without reallocating",3,[[["self"]],["usize"]]],[11,"spilled",E,"Returns `true` if the data has spilled into a separate…",3,[[["self"]],["bool"]]],[11,"drain",E,"Empty the vector and return an iterator over its former…",3,[[["self"]],["drain"]]],[11,"push",E,"Append an item to the vector.",3,[[["self"]]]],[11,"pop",E,"Remove an item from the end of the vector and return it,…",3,[[["self"]],[R[67]]]],[11,"grow",E,"Re-allocate to set the capacity to `max(new_cap,…",3,[[["self"],["usize"]]]],[11,"reserve",E,"Reserve capacity for `additional` more elements to be…",3,[[["self"],["usize"]]]],[11,"reserve_exact",E,"Reserve the minimum capacity for `additional` more…",3,[[["self"],["usize"]]]],[11,R[267],E,"Shrink the capacity of the vector as much as possible.",3,[[["self"]]]],[11,"truncate",E,"Shorten the vector, keeping the first `len` elements and…",3,[[["self"],["usize"]]]],[11,R[75],E,"Extracts a slice containing the entire vector.",3,[[["self"]]]],[11,"as_mut_slice",E,"Extracts a mutable slice of the entire vector.",3,[[["self"]]]],[11,"swap_remove",E,"Remove the element at position `index`, replacing it with…",3,[[["self"],["usize"]]]],[11,"clear",E,"Remove all elements from the vector.",3,[[["self"]]]],[11,"remove",E,"Remove and return the element at position `index`,…",3,[[["self"],["usize"]]]],[11,"insert",E,"Insert an element at position `index`, shifting all…",3,[[["self"],["usize"]]]],[11,"insert_many",E,"Insert multiple elements at position `index`, shifting all…",3,[[["self"],[R[66]],["usize"]]]],[11,"into_vec",E,"Convert a SmallVec to a Vec, without reallocating if the…",3,[[],["vec"]]],[11,R[28],E,"Convert the SmallVec into an `A` if possible. Otherwise…",3,[[],[R[2]]]],[11,"retain",E,R[270],3,[[["self"],["fnmut"]]]],[11,"dedup",E,"Removes consecutive duplicate elements.",3,[[["self"]]]],[11,"dedup_by",E,"Removes consecutive duplicate elements using the given…",3,[[["self"],["f"]]]],[11,"dedup_by_key",E,"Removes consecutive elements that map to the same key.",3,[[["self"],["f"]]]],[11,"from_raw_parts",E,"Creates a `SmallVec` directly from the raw components of…",3,[[["usize"]],[R[60]]]],[11,"from_slice",E,"Copy the elements from a slice into a new `SmallVec`.",3,[[],["self"]]],[11,"insert_from_slice",E,"Copy elements from a slice into the vector at position…",3,[[["self"],["usize"]]]],[11,R[62],E,"Copy elements from a slice and append them to the vector.",3,[[["self"]]]],[11,"resize",E,"Resizes the vector so that its length is equal to `len`.",3,[[["self"],["usize"]]]],[11,"from_elem",E,"Creates a `SmallVec` with `n` copies of `elem`. ``` use…",3,[[["usize"]],["self"]]],[14,R[60],E,"Creates a [`SmallVec`] containing the arguments.",N,N],[11,R[63],E,E,4,[[],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,R[63],E,E,3,[[],["i"]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[63],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[23]]]],[11,"push",E,E,3,[[["self"]]]],[11,R[62],E,E,3,[[["self"]]]],[11,"drop",E,E,4,[[["self"]]]],[11,"drop",E,E,3,[[["self"]]]],[11,"drop",E,E,5,[[["self"]]]],[11,"as_ref",E,E,3,[[["self"]]]],[11,R[63],E,E,3,[[]]],[11,R[64],E,E,4,[[["self"]],[R[67]]]],[11,R[64],E,E,5,[[["self"]],[R[67]]]],[11,R[45],E,E,3,[[],[R[60]]]],[11,"clone",E,E,3,[[["self"]],[R[60]]]],[11,R[187],E,E,3,[[["self"],[R[60]]],[[R[65]],[R[67],[R[65]]]]]],[11,"extend",E,E,3,[[["self"],[R[66]]]]],[11,"eq",E,E,3,[[["self"],[R[60]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[60]]],["bool"]]],[11,"from",E,E,3,[[],[R[60]]]],[11,"from",E,E,3,[[["vec"]],[R[60]]]],[11,"from",E,E,3,[[["a"]],[R[60]]]],[11,"next",E,E,4,[[["self"]],[R[67]]]],[11,R[68],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[R[67]]]],[11,R[68],E,E,5,[[["self"]]]],[11,"cmp",E,E,3,[[["self"],[R[60]]],[R[65]]]],[11,"as_mut",E,E,3,[[["self"]]]],[11,"deref",E,E,3,[[["self"]]]],[11,R[30],E,E,3,[[["self"]]]],[11,"hash",E,E,3,[[["self"],["h"]]]],[11,"fmt",E,E,3,[[["self"],[R[12]]],[R[2]]]],[11,"index",E,E,3,[[["self"],["usize"]]]],[11,"index",E,E,3,[[["self"],["range",["usize"]],["usize"]]]],[11,"index",E,E,3,[[["self"],[R[70],["usize"]],["usize"]]]],[11,"index",E,E,3,[[["self"],["rangeto",["usize"]],["usize"]]]],[11,"index",E,E,3,[[["self"],[R[71]]]]],[11,R[69],E,E,3,[[["self"],["usize"]]]],[11,R[69],E,E,3,[[["self"],["range",["usize"]],["usize"]]]],[11,R[69],E,E,3,[[["self"],[R[70],["usize"]],["usize"]]]],[11,R[69],E,E,3,[[["self"],["rangeto",["usize"]],["usize"]]]],[11,R[69],E,E,3,[[["self"],[R[71]]]]],[11,R[271],E,E,3,[[[R[66]]],[R[60]]]],[11,R[9],E,E,3,[[["self"]]]],[11,R[10],E,E,3,[[["self"]]]],[11,"write",E,E,3,[[["self"]],[["usize"],[R[2],["usize"]]]]],[11,"write_all",E,E,3,[[["self"]],[R[2]]]],[11,"flush",E,E,3,[[["self"]],[R[2]]]]],"p":[[8,"VecLike"],[8,R[72]],[8,"Array"],[3,R[73]],[3,"Drain"],[3,R[74]]]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","i":[[4,R[13],"strsim",E,N,N],[13,"DifferentLengthArgs",E,E,0,N],[5,"hamming",E,"Calculates the number of positions in the two strings…",N,[[["str"]],["hammingresult"]]],[5,"jaro",E,"Calculates the Jaro similarity between two strings. The…",N,[[["str"]],["f64"]]],[5,"jaro_winkler",E,"Like Jaro but gives a boost to strings that have a common…",N,[[["str"]],["f64"]]],[5,"levenshtein",E,"Calculates the minimum number of insertions, deletions,…",N,[[["str"]],["usize"]]],[5,"normalized_levenshtein",E,"Calculates a normalized score of the Levenshtein algorithm…",N,[[["str"]],["f64"]]],[5,"osa_distance",E,"Like Levenshtein but allows for adjacent transpositions.…",N,[[["str"]],["usize"]]],[5,"damerau_levenshtein",E,"Like optimal string alignment, but substrings can be…",N,[[["str"]],["usize"]]],[5,"normalized_damerau_levenshtein",E,"Calculates a normalized score of the Damerau–Levenshtein…",N,[[["str"]],["f64"]]],[6,"HammingResult",E,E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,"eq",E,E,0,[[["self"],["strsimerror"]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]]],"p":[[4,R[13]]]};
searchIndex["typed_arena"]={"doc":"The arena, a fast but limited type of allocator.","i":[[3,"Arena","typed_arena","An arena of objects of type `T`.",N,N],[11,"new",E,"Construct a new arena.",0,[[],["arena"]]],[11,R[266],E,"Construct a new arena with capacity for `n` values…",0,[[["usize"]],["arena"]]],[11,"alloc",E,"Allocates a value in the arena, and returns a mutable…",0,[[["self"],[T]],[T]]],[11,"alloc_extend",E,"Uses the contents of an iterator to allocate values in the…",0,[[["self"],["i"]]]],[11,"alloc_uninitialized",E,"Allocates space for a given number of values, but doesn't…",0,[[["self"],["usize"]]]],[11,"uninitialized_array",E,"Returns unused space.",0,[[["self"]]]],[11,"into_vec",E,"Convert this `Arena` into a `Vec<T>`.",0,[[],["vec"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[45],E,E,0,[[],["self"]]]],"p":[[3,"Arena"]]};
searchIndex["ucd_trie"]={"doc":"The ucd-trie crate provides a compressed trie set…","i":[[3,R[25],"ucd_trie","An owned trie set.",N,N],[3,R[26],E,"A borrowed trie set.",N,N],[4,"Error",E,"An error that can occur during construction of a trie.",N,N],[13,"InvalidCodepoint",E,"This error is returned when an invalid codepoint is given…",0,N],[13,"GaveUp",E,"This error is returned when a set of Unicode codepoints…",0,N],[11,"from_scalars",E,R[16],1,[[["i"]],[[R[2],[R[15]]],[R[15]]]]],[11,"from_codepoints",E,R[16],1,[[["i"]],[[R[2],[R[15]]],[R[15]]]]],[11,R[75],E,"Return this set as a slice.",1,[[["self"]],[R[24]]]],[11,R[17],E,R[18],1,[[["self"],["char"]],["bool"]]],[11,R[19],E,R[20],1,[[["self"],["u32"]],["bool"]]],[6,"Result",E,"A type alias that maps to `std::result::Result<T,…",N,N],[6,"TrieSet",E,"A type alias for `TrieSetSlice<'static>`.",N,N],[11,R[17],E,R[18],2,[[["self"],["char"]],["bool"]]],[11,R[19],E,R[20],2,[[["self"],["u32"]],["bool"]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[173],E,E,0,[[["self"]],[R[1]]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,"clone",E,E,0,[[["self"]],["error"]]],[11,"clone",E,E,1,[[["self"]],[R[15]]]],[11,"clone",E,E,2,[[["self"]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[2]]]],[11,R[208],E,E,0,[[["self"]],["str"]]]],"p":[[4,"Error"],[3,R[25]],[3,R[26]]]};
searchIndex["unchecked_index"]={"doc":"Unchecked indexing through the regular index syntax.","i":[[3,R[264],R[257],"Wrapper type for unchecked indexing through the regular…",N,N],[5,R[257],E,"Create a new unchecked indexing wrapper.",N,[[[T]],["uncheckedindex"]]],[5,R[259],E,R[258],N,[[["i"],[T]]]],[5,R[260],E,R[258],N,[[["i"],[T]]]],[8,R[261],E,E,N,N],[10,"assert_indexable_with",E,"Assert (using a regular assertion) that the index is…",0,[[["self"],["i"]]]],[8,R[262],E,E,N,N],[16,"Output",E,E,1,N],[10,R[259],E,E,1,[[["self"],["i"]]]],[8,R[263],E,E,N,N],[10,R[260],E,E,2,[[["self"],["i"]]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,"deref",E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[T]]],[11,"index",E,R[258],3,[[["self"],["i"]]]],[11,R[69],E,R[258],3,[[["self"],["i"]]]],[11,"clone",E,E,3,[[["self"]],["self"]]]],"p":[[8,R[261]],[8,R[262]],[8,R[263]],[3,R[264]]]};
searchIndex["unicode_categories"]={"doc":"`unicode_categories` is a crate that adds extensions to…","i":[[8,R[311],"unicode_categories",E,N,N],[10,"is_other_control",E,R[304],0,[[],["bool"]]],[10,"is_other_format",E,R[304],0,[[],["bool"]]],[10,"is_other_private_use",E,"Returns true if this value is a member of the \"Other,…",0,[[],["bool"]]],[10,"is_letter_lowercase",E,R[305],0,[[],["bool"]]],[10,"is_letter_modifier",E,R[305],0,[[],["bool"]]],[10,"is_letter_other",E,R[305],0,[[],["bool"]]],[10,"is_letter_titlecase",E,R[305],0,[[],["bool"]]],[10,"is_letter_uppercase",E,R[305],0,[[],["bool"]]],[10,"is_mark_spacing_combining",E,R[306],0,[[],["bool"]]],[10,"is_mark_enclosing",E,R[306],0,[[],["bool"]]],[10,"is_mark_nonspacing",E,R[306],0,[[],["bool"]]],[10,"is_number_decimal_digit",E,R[307],0,[[],["bool"]]],[10,"is_number_letter",E,R[307],0,[[],["bool"]]],[10,"is_number_other",E,R[307],0,[[],["bool"]]],[10,"is_punctuation_connector",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_dash",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_close",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_final_quote",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_initial_quote",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_other",E,R[308],0,[[],["bool"]]],[10,"is_punctuation_open",E,R[308],0,[[],["bool"]]],[10,"is_symbol_currency",E,R[309],0,[[],["bool"]]],[10,"is_symbol_modifier",E,R[309],0,[[],["bool"]]],[10,"is_symbol_math",E,R[309],0,[[],["bool"]]],[10,"is_symbol_other",E,R[309],0,[[],["bool"]]],[10,"is_separator_line",E,R[310],0,[[],["bool"]]],[10,"is_separator_paragraph",E,R[310],0,[[],["bool"]]],[10,"is_separator_space",E,R[310],0,[[],["bool"]]],[11,"is_other",E,"Returns true if this value is a member of a \"Other\"…",0,[[],["bool"]]],[11,"is_letter",E,"Returns true if this value is a member of a \"Letter\"…",0,[[],["bool"]]],[11,"is_mark",E,"Returns true if this value is a member of a \"Mark\"…",0,[[],["bool"]]],[11,"is_number",E,"Returns true if this value is a member of a \"Number\"…",0,[[],["bool"]]],[11,"is_punctuation",E,"Returns true if this value is a member of a \"Punctuation\"…",0,[[],["bool"]]],[11,"is_symbol",E,"Returns true if this value is a member of a \"Symbol\"…",0,[[],["bool"]]],[11,"is_separator",E,"Returns true if this value is a member of a \"Separator\"…",0,[[],["bool"]]]],"p":[[8,R[311]]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types…","i":[[17,R[59],"unicode_width","The version of Unicode that this version of unicode-width…",N,N],[8,R[57],E,"Methods for determining displayed width of Unicode…",N,N],[10,"width",E,R[54],0,[[],[[R[67],["usize"]],["usize"]]]],[10,R[55],E,R[54],0,[[],[[R[67],["usize"]],["usize"]]]],[8,R[58],E,"Methods for determining displayed width of Unicode strings.",N,N],[10,"width",E,R[56],1,[[["self"]],["usize"]]],[10,R[55],E,R[56],1,[[["self"]],["usize"]]]],"p":[[8,R[57]],[8,R[58]]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser…","i":[[17,R[59],"unicode_xid","The version of Unicode that this version of unicode-xid is…",N,N],[8,R[0],E,"Methods for determining if a character is a valid…",N,N],[10,"is_xid_start",E,"Returns whether the specified character satisfies the…",0,[[],["bool"]]],[10,"is_xid_continue",E,"Returns whether the specified `char` satisfies the…",0,[[],["bool"]]]],"p":[[8,R[0]]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys.…","i":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,R[272],E,"A vacant Entry.",N,N],[3,R[273],E,"An occupied Entry.",N,N],[3,"Iter",E,"An iterator over the key-value pairs of a map.",N,N],[3,"IterMut",E,"An iterator over the key-value pairs of a map, with the…",N,N],[3,"Keys",E,"An iterator over the keys of a map.",N,N],[3,"Values",E,R[265],N,N],[3,R[274],E,R[265],N,N],[3,R[74],E,"A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain",E,"A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry",E,"A view into a single entry in a map, which may either be…",N,N],[13,"Vacant",E,"A vacant Entry",0,N],[13,"Occupied",E,"An occupied Entry",0,N],[11,"new",E,"Creates an empty `VecMap`.",1,[[],["self"]]],[11,R[266],E,"Creates an empty `VecMap` with space for at least…",1,[[["usize"]],["self"]]],[11,"capacity",E,"Returns the number of elements the `VecMap` can hold…",1,[[["self"]],["usize"]]],[11,"reserve_len",E,"Reserves capacity for the given `VecMap` to contain `len`…",1,[[["self"],["usize"]]]],[11,"reserve_len_exact",E,"Reserves the minimum capacity for the given `VecMap` to…",1,[[["self"],["usize"]]]],[11,R[267],E,"Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys",E,"Returns an iterator visiting all keys in ascending order…",1,[[["self"]],["keys"]]],[11,"values",E,R[268],1,[[["self"]],["values"]]],[11,"values_mut",E,R[268],1,[[["self"]],["valuesmut"]]],[11,"iter",E,R[269],1,[[["self"]],["iter"]]],[11,"iter_mut",E,R[269],1,[[["self"]],["itermut"]]],[11,"append",E,"Moves all elements from `other` into the map while…",1,[[["self"]]]],[11,"split_off",E,"Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain",E,R[269],1,[[["self"]],["drain"]]],[11,"len",E,R[364],1,[[["self"]],["usize"]]],[11,R[122],E,R[365],1,[[["self"]],["bool"]]],[11,"clear",E,"Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get",E,"Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],[[R[67]],["v"]]]],[11,"contains_key",E,"Returns true if the map contains a value for the specified…",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut",E,"Returns a mutable reference to the value corresponding to…",1,[[["self"],["usize"]],[[R[67]],["v"]]]],[11,"insert",E,"Inserts a key-value pair into the map. If the key already…",1,[[["self"],["usize"],["v"]],[R[67]]]],[11,"remove",E,"Removes a key from the map, returning the value at the key…",1,[[["self"],["usize"]],[R[67]]]],[11,"entry",E,"Gets the given key's corresponding entry in the map for…",1,[[["self"],["usize"]],["entry"]]],[11,"retain",E,R[270],1,[[["self"],["f"]]]],[11,"or_insert",E,"Ensures a value is in the entry by inserting the default…",0,[[["v"]],["v"]]],[11,"or_insert_with",E,"Ensures a value is in the entry by inserting the result of…",0,[[["fnonce"]],["v"]]],[11,"insert",E,"Sets the value of the entry with the VacantEntry's key,…",2,[[["v"]],["v"]]],[11,"get",E,"Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut",E,"Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut",E,"Converts the entry into a mutable reference to its value.",3,[[],["v"]]],[11,"insert",E,"Sets the value of the entry with the OccupiedEntry's key,…",3,[[["self"],["v"]],["v"]]],[11,"remove",E,"Takes the value of the entry out of the map, and returns it.",3,[[],["v"]]],[11,R[63],E,E,1,[[],["i"]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[23]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[23]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[23]]]],[11,R[63],E,E,4,[[],["i"]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[23]]]],[11,R[63],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[23]]]],[11,R[63],E,E,6,[[],["i"]]],[11,R[21],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[],[R[2]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[23]]]],[11,R[63],E,E,7,[[],["i"]]],[11,R[21],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[7],E,E,7,[[[U]],[R[2]]]],[11,R[8],E,E,7,[[],[R[2]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[23]]]],[11,R[63],E,E,8,[[],["i"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[7],E,E,8,[[[U]],[R[2]]]],[11,R[8],E,E,8,[[],[R[2]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[23]]]],[11,R[63],E,E,9,[[],["i"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[7],E,E,9,[[[U]],[R[2]]]],[11,R[8],E,E,9,[[],[R[2]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[23]]]],[11,R[63],E,E,10,[[],["i"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[7],E,E,10,[[[U]],[R[2]]]],[11,R[8],E,E,10,[[],[R[2]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[["self"]],[T]]],[11,R[11],E,E,10,[[["self"]],[R[23]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[2]]]],[11,R[8],E,E,0,[[],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[23]]]],[11,R[63],E,R[269],1,[[],["intoiter"]]],[11,R[64],E,E,4,[[["self"]],[R[67]]]],[11,R[64],E,E,5,[[["self"]],[R[67]]]],[11,R[64],E,E,10,[[["self"]],[R[67]]]],[11,R[64],E,E,6,[[["self"]],[[R[67],["usize"]],["usize"]]]],[11,R[64],E,E,7,[[["self"]],[["v"],[R[67]]]]],[11,R[64],E,E,8,[[["self"]],[[R[67]],["v"]]]],[11,R[64],E,E,9,[[["self"]],[R[67]]]],[11,R[45],E,E,1,[[],["self"]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone_from",E,E,1,[[["self"],["self"]]]],[11,"clone",E,E,4,[[["self"]],["iter"]]],[11,"clone",E,E,6,[[["self"]],["keys"]]],[11,"clone",E,E,7,[[["self"]],["values"]]],[11,R[187],E,E,1,[[["self"]],[[R[65]],[R[67],[R[65]]]]]],[11,"extend",E,E,1,[[["self"],[R[66]]]]],[11,"extend",E,E,1,[[["self"],[R[66]]]]],[11,"eq",E,E,1,[[["self"]],["bool"]]],[11,"next",E,E,4,[[["self"]],[R[67]]]],[11,R[68],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[R[67]]]],[11,R[68],E,E,5,[[["self"]]]],[11,"next",E,E,10,[[["self"]],[R[67]]]],[11,R[68],E,E,10,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[[R[67],["usize"]],["usize"]]]],[11,R[68],E,E,6,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[["v"],[R[67]]]]],[11,R[68],E,E,7,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[[R[67]],["v"]]]],[11,R[68],E,E,8,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[R[67]]]],[11,R[68],E,E,9,[[["self"]]]],[11,"cmp",E,E,1,[[["self"]],[R[65]]]],[11,"hash",E,E,1,[[["self"],["h"]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[2]]]],[11,"index",E,E,1,[[["self"],["usize"]],["v"]]],[11,"index",E,E,1,[[["self"],["usize"]],["v"]]],[11,R[69],E,E,1,[[["self"],["usize"]],["v"]]],[11,R[69],E,E,1,[[["self"],["usize"]],["v"]]],[11,R[271],E,E,1,[[[R[66]]],["self"]]]],"p":[[4,"Entry"],[3,"VecMap"],[3,R[272]],[3,R[273]],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,R[274]],[3,R[74]],[3,"Drain"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);